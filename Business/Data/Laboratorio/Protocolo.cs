/*
insert license info here
*/
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using NHibernate;
using NHibernate.Expression;
using MathParser;
using System.IO;
using System.Drawing;
using QRCoder;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Protocolo : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idprotocolo; 
		private Efector m_idefector; 
		private int m_numero;
        private int m_numerotiposervicio;
		private int m_numerodiario;
        private string m_prefijosector;

     

        private int m_numerosector;
        private SectorServicio m_idsector;
		private TipoServicio m_idtiposervicio; 
		private DateTime m_fecha; 
		private DateTime m_fechaorden; 
		private DateTime m_fecharetiro; 
		private Paciente m_idpaciente; 
		private Efector m_idefectorsolicitante; 
		private int m_idespecialistasolicitante; 
		private ObraSocial m_idobrasocial; 
		private Origen m_idorigen; 
		private Prioridad m_idprioridad; 
		private string m_observacion;

        public string GenerarCasoSISA()
        {
           
            string iditem = "";
            string m_strSQL = @" select idsubItem from lab_detalleprotocolo d (nolock) where idprotocolo= " + this.IdProtocolo.ToString() + @" 
and exists (select iditem from  LAB_ConfiguracionSISA  (nolock)  where iditem = d.idsubItem and idCaracter= " + this.IdCaracter.ToString() + @")" ;



            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            DataTable dt = Ds.Tables[0];


            for (int i = 0; i < dt.Rows.Count; i++)
            {
                iditem = dt.Rows[i][0].ToString();


            }
            // control no se sube si es control de alta
            if (this.IdCaracter == 2)
                iditem = "";
            // control si es un temporal no se sube
           if ( this.IdPaciente.IdEstado==2)
                iditem = "";
           //control si ya se subió en los ultuimos 14 dias
            if (!this.VerificarProtocoloAnterior(14))
                iditem = "";
            return iditem;
        }

        public void GrabarAuditoriaProtocoloObs(string m_accion, int m_idusuario, string m_observacion)
        {
            AuditoriaProtocolo oRegistro = new AuditoriaProtocolo();
            oRegistro.Accion = m_accion;
            oRegistro.Fecha = DateTime.Now;
            oRegistro.Hora = DateTime.Now.ToLongTimeString();
            oRegistro.IdProtocolo = this.IdProtocolo;
            oRegistro.Valor = m_observacion;
            oRegistro.IdUsuario = m_idusuario;
            oRegistro.Save();
        }

        private string m_sala;
        private string m_cama;
        private bool m_alerta;
        private int m_edad;
        private int m_unidadedad;
        private string m_sexo;
        private string m_embarazada;
        private string m_nombreobrasocial;
        //private int m_pesonacimiento;
        //private int m_semanagestacion;
        private string m_numeroorigen;
        private string m_numeroorigen2;
        private string m_ipcarga;
        private string m_impre;







        //private string m_reciennacido;
        private bool m_baja;
        private bool m_impreso;
        private int m_estado;
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro;
        private string m_observacionResultado;
        private string m_descripcionProducto;
        private int m_idmuestra;
        private int m_idconservacion;
        private DateTime m_fechatomamuestra;
        private int m_idcaracter;
        private string m_especialista;
        private string m_matriculaespecialista;
        private int m_codos;
        private int m_idcasosisa;
        private DateTime m_fechainiciosintomas;
        private DateTime m_fechaultimocontacto;
        private bool m_notificarresultado;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Protocolo()
		{
			m_idprotocolo = 0; 
			m_idefector = new Efector(); 
			m_numero = 0; 
			m_numerodiario = 0;
            m_prefijosector = String.Empty;
            m_numerosector = 0;
            m_numerotiposervicio = 0;
            m_idsector = new SectorServicio(); 
			m_idtiposervicio = new TipoServicio(); 
			m_fecha = DateTime.MinValue; 
			m_fechaorden = DateTime.MinValue; 
			m_fecharetiro = DateTime.MinValue; 
			m_idpaciente = new Paciente(); 
			m_idefectorsolicitante = new Efector(); 
			m_idespecialistasolicitante = 0; 
			m_idobrasocial = new ObraSocial(); 
			m_idorigen = new Origen(); 
			m_idprioridad = new Prioridad(); 
			m_observacion = String.Empty;
            m_sala = String.Empty;
            m_cama = String.Empty;
            m_estado = 0;
            m_edad = 0;
            m_unidadedad = 0;
            m_sexo = String.Empty;
            m_embarazada = String.Empty;
            //m_horanacimiento = String.Empty;
            //m_pesonacimiento = 0;
            //m_semanagestacion = 0;
            m_numeroorigen = String.Empty;
            m_numeroorigen2 = String.Empty;
            //m_reciennacido= String.Empty                ;
            m_alerta = false;
		
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue;
            m_fechatomamuestra = DateTime.MinValue;
            m_idmuestra = 0;
            m_descripcionProducto = String.Empty;
            m_nombreobrasocial= String.Empty;
            m_idconservacion = 0;
            m_idcaracter = 0;
            m_especialista = String.Empty;
       m_matriculaespecialista = String.Empty;
            m_codos = 0;
            m_idcasosisa = 0;
            m_ipcarga = String.Empty;
            m_impre= String.Empty;

           m_fechainiciosintomas= DateTime.MinValue;
         m_fechaultimocontacto= DateTime.MinValue;
            m_notificarresultado = true;

    }

        public DataTable GetHoraValidacion()
        {
            string m_strSQL = @" select case when  DATEDIFF(hour, fechaprevalida, getdate()) >=1 then 1 else 0 end  confirmar, idDetalleProtocolo
 from lab_detalleprotocolo where idusuarioprevalida>0 and idusuariovalida=0
 ";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            return Ds.Tables[0];
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public Protocolo(
			Efector idefector, 
			int numero, 
            int numerotiposervicio,
			int numerodiario, 
            string prefijosector,
            int numerosector,
            SectorServicio idsector, 
			TipoServicio idtiposervicio, 
			DateTime fecha, 
			DateTime fechaorden, 
			DateTime fecharetiro, 
			Paciente idpaciente, 
			Efector idefectorsolicitante, 
			int idespecialistasolicitante, 
			ObraSocial idobrasocial, 
			Origen idorigen, 
			Prioridad idprioridad, 
            int  estado,
			int edad,
            int unidadedad,
            string sexo,
            string embarazada,
            //string reciennacido,
            bool alerta,
            string observacionResultado,
			Usuario idusuarioregistro, 
			DateTime fecharegistro,
            DateTime fechatomamuestra,
            	int idmuestra,
                int idconservacion,
                string descripcionProducto,
                string nombreobrasocial,
                int  idcaracter,
              string  especialista  ,
      string  matriculaespecialista ,
      int codos,
      int idcasosisa,
      string ipcarga,
            string impre,

           DateTime fechainiciosintomas,
        DateTime fechaultimocontacto,
       bool notificarresultado)
			: this()
		{
			m_idefector = idefector;
			m_numero = numero;
            m_numerotiposervicio = numerotiposervicio;
			m_numerodiario = numerodiario;
            m_prefijosector = prefijosector;
            m_numerosector = numerosector;
            m_idsector = idsector;
			m_idtiposervicio = idtiposervicio;
			m_fecha = fecha;
			m_fechaorden = fechaorden;
			m_fecharetiro = fecharetiro;
			m_idpaciente = idpaciente;
			m_idefectorsolicitante = idefectorsolicitante;
			m_idespecialistasolicitante = idespecialistasolicitante;
			m_idobrasocial = idobrasocial;
			m_idorigen = idorigen;
			m_idprioridad = idprioridad;
			m_observacion = String.Empty;
            m_sala = String.Empty;
            m_cama = String.Empty;
            m_estado = estado;
            m_edad = edad;
            m_unidadedad = unidadedad;
            m_sexo = sexo;
            m_embarazada= embarazada;
            //m_reciennacido = reciennacido;
            m_observacionResultado = observacionResultado;
            m_alerta = alerta;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
            m_idmuestra = idmuestra;
            m_fechatomamuestra = fechatomamuestra;
            m_descripcionProducto = descripcionProducto;
            m_idconservacion = idconservacion;
            m_nombreobrasocial = nombreobrasocial;
            m_idcaracter = idcaracter;
            m_especialista = especialista;
            m_matriculaespecialista = matriculaespecialista;
            m_codos = codos;
            m_idcasosisa = idcasosisa;
            m_ipcarga = ipcarga;
            m_impre = impre;
            m_fechainiciosintomas = fechainiciosintomas;
            m_fechaultimocontacto = fechaultimocontacto;
            m_notificarresultado = notificarresultado;

        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProtocolo
		{
			get { return m_idprotocolo; }
			set
			{
				m_isChanged |= ( m_idprotocolo != value ); 
				m_idprotocolo = value;
			}

		}
        public int IdCasoSISA
        {
            get { return m_idcasosisa; }
            set
            {
                m_isChanged |= (m_idcasosisa != value);
                m_idcasosisa = value;
            }

        }
        public int CodOs
        {
            get { return m_codos; }
            set
            {
                m_isChanged |= (m_codos != value);
                m_codos = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int Numero
		{
			get { return m_numero; }
			set
			{
				m_isChanged |= ( m_numero != value ); 
				m_numero = value;
			}

		}
        public int IdCaracter
        {
            get { return m_idcaracter; }
            set
            {
                m_isChanged |= (m_idcaracter != value);
                m_idcaracter = value;
            }

        }
        public int NumeroTipoServicio
        {
            get { return m_numerotiposervicio; }
            set
            {
                m_isChanged |= (m_numerotiposervicio != value);
                m_numerotiposervicio = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public int NumeroDiario
		{
			get { return m_numerodiario; }
			set
			{
				m_isChanged |= ( m_numerodiario != value ); 
				m_numerodiario = value;
			}

		}


        public string PrefijoSector
        {
            get { return m_prefijosector; }

            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for m_prefijogrupo", value, value.ToString());

                m_isChanged |= (m_prefijosector != value); m_prefijosector = value;
            }
        }

        public string IpCarga
        {
            get { return m_ipcarga; }

            set
            {
                if (value != null && value.Length >50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_ipcarga", value, value.ToString());

                m_isChanged |= (m_ipcarga != value); m_ipcarga = value;
            }
        }

        public string Impres
        {
            get { return m_impre; }

            set
            {
                if (value != null && value.Length > 150)
                    throw new ArgumentOutOfRangeException("Invalid value for m_impre", value, value.ToString());

                m_isChanged |= (m_impre != value); m_impre = value;
            }
        }

        public string Especialista
        {
            get { return m_especialista; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_especialista", value, value.ToString());

                m_isChanged |= (m_especialista != value); m_especialista = value;
            }
        }
        public string MatriculaEspecialista
        {
            get { return m_matriculaespecialista; }

            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for m_matriculaespecialista", value, value.ToString());

                m_isChanged |= (m_matriculaespecialista != value); m_matriculaespecialista = value;
            }
        }
        public string NombreObraSocial
        {
            get { return m_nombreobrasocial; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for NombreObraSocial", value, value.ToString());

                m_isChanged |= (m_nombreobrasocial != value); m_nombreobrasocial = value;
            }
        }

        public string getPlacas()
        {
            DetalleProtocolo oDetalle = new DetalleProtocolo();
            oDetalle = (DetalleProtocolo)oDetalle.Get(typeof(DetalleProtocolo),"IdProtocolo", this);


            string s_placa = "";
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocoloPlaca));

            crit.Add(Expression.Eq("IdDetalleProtocolo", oDetalle.IdDetalleProtocolo));

            IList lista = crit.List();
            foreach (DetalleProtocoloPlaca oDetalle1 in lista)
            {
                Placa oP = new Placa();
                oP = (Placa)oP.Get(typeof(Placa), oDetalle1.IdPlaca);
                if (!oP.Baja)
                {
                    if (s_placa == "")
                        s_placa = oDetalle1.IdPlaca.ToString();
                    else
                        s_placa += "-" + oDetalle1.IdPlaca.ToString();
                }
            }
            return s_placa;


        }

        public int NumeroSector
        {
            get { return m_numerosector; }
            set
            {
                m_isChanged |= (m_numerosector != value);
                m_numerosector = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public TipoServicio IdTipoServicio
		{
			get { return m_idtiposervicio; }
			set
			{
				m_isChanged |= ( m_idtiposervicio != value ); 
				m_idtiposervicio = value;
			}

		}

        /// <summary>
        /// 
        /// </summary>
        public SectorServicio IdSector
        {
            get { return m_idsector; }
            set
            {
                m_isChanged |= (m_idsector != value);
                m_idsector = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime Fecha
		{
			get { return m_fecha; }
			set
			{
				m_isChanged |= ( m_fecha != value ); 
				m_fecha = value;
			}

		}

        public DateTime FechaInicioSintomas
        {
            get { return m_fechainiciosintomas; }
            set
            {
                m_isChanged |= (m_fechainiciosintomas != value);
                m_fechainiciosintomas = value;
            }

        }

        public DateTime FechaUltimoContacto
        {
            get { return m_fechaultimocontacto; }
            set
            {
                m_isChanged |= (m_fechaultimocontacto != value);
                m_fechaultimocontacto = value;
            }

        }

        public bool VerificaPermisodeAcceso(int v)
        {
            bool puedever = false;
            if (this.Estado == 3) /// está bloqueado
            {
                Usuario oUser = new Usuario();
                oUser = (Usuario)oUser.Get(typeof(Usuario), v);


                string m_strSQL = " SELECT idperfilvinculado from LAB_PerfilLaboratorio where idperfilvinculado=" + oUser.IdPerfil.IdPerfil;

                DataSet Ds = new DataSet();
                SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                SqlDataAdapter adapter = new SqlDataAdapter();
                adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
                adapter.Fill(Ds);

                DataTable dt = Ds.Tables[0];
               if (dt.Rows.Count==0)
                    puedever = true; ///Laboratorio central
                else{



                    ISession m_session = NHibernateHttpModule.CurrentSession;
                    ICriteria crit = m_session.CreateCriteria(typeof(Business.Data.Laboratorio.ProtocoloPermiso));
                    crit.Add(Expression.Eq("IdProtocolo", this));
                    IList lista = crit.List();
                    if (lista.Count > 0)
                    {
                        foreach (Business.Data.Laboratorio.ProtocoloPermiso oPermiso in lista)
                        {
                            if (oUser.IdPerfil.IdPerfil == oPermiso.IdPerfil)
                            {
                                puedever = true; break;
                            }
                        } // foreach
                    } /// if lista
                } // else
            }/// estadso=3
            else
                puedever = true;

            return puedever;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaOrden
		{
			get { return m_fechaorden; }
			set
			{
				m_isChanged |= ( m_fechaorden != value ); 
				m_fechaorden = value;
			}

		}

        //public string EsEmbarazo()
        //{
        //    string embarazada = this.Sexo;
        //    if (embarazada == "F")
        //    {
        //        ISession m_session = NHibernateHttpModule.CurrentSession;
        //        ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloDiagnostico));
        //        crit.Add(Expression.Eq("IdProtocolo", this));


        //        IList detalle = crit.List();

        //        if (detalle.Count > 0)
        //        {
        //            foreach (ProtocoloDiagnostico oDetalle in detalle)
        //            {
        //                Cie10 oDiag = new Cie10();
        //                oDiag = (Cie10)oDiag.Get(typeof(Cie10), oDetalle.IdDiagnostico);
        //                if (oDiag != null)
        //                {
        //                    if (oDiag.Codigo.ToUpper() == "Z32.1")
        //                    { embarazada = "E"; break; }
        //                }
        //            }
        //        }
        //    }
        //    return embarazada;
        //}

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRetiro
		{
			get { return m_fecharetiro; }
			set
			{
				m_isChanged |= ( m_fecharetiro != value ); 
				m_fecharetiro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Paciente IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= ( m_idpaciente != value ); 
				m_idpaciente = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfectorSolicitante
		{
			get { return m_idefectorsolicitante; }
			set
			{
				m_isChanged |= ( m_idefectorsolicitante != value ); 
				m_idefectorsolicitante = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdEspecialistaSolicitante
		{
			get { return m_idespecialistasolicitante; }
			set
			{
				m_isChanged |= ( m_idespecialistasolicitante != value ); 
				m_idespecialistasolicitante = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public ObraSocial IdObraSocial
		{
			get { return m_idobrasocial; }
			set
			{
				m_isChanged |= ( m_idobrasocial != value ); 
				m_idobrasocial = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Origen IdOrigen
		{
			get { return m_idorigen; }
			set
			{
				m_isChanged |= ( m_idorigen != value ); 
				m_idorigen = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Prioridad IdPrioridad
		{
			get { return m_idprioridad; }
			set
			{
				m_isChanged |= ( m_idprioridad != value ); 
				m_idprioridad = value;
			}

		}

        public int Edad
        {
            get { return m_edad; }
            set
            {
                m_isChanged |= (m_edad != value);
                m_edad = value;
            }

        }
        public int UnidadEdad
        {
            get { return m_unidadedad; }
            set
            {
                m_isChanged |= (m_unidadedad != value);
                m_unidadedad = value;
            }

        }

        public object getListaCasos()
        {
            string m_strSQL = @" select CFP.idCasoFiliacion, CF.nombre,
case when CF.baja=1 then 'ANULADO' else 
    case when  CF.IdUsuarioValida > 0 then 'TERMINADO' ELSE 'ACTIVO' END
END AS estado    
from LAB_CasoFiliacionProtocolo as CFP
inner join LAB_CasoFiliacion as CF on Cf.idCasoFiliacion = CFP.idCasoFiliacion
 where idProtocolo = " + this.IdProtocolo.ToString();

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            
            return Ds.Tables[0];
            
        }

        public string Sexo
        {
            get { return m_sexo; }

            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Sexo", value, value.ToString());

                m_isChanged |= (m_sexo != value); m_sexo = value;
            }
        }

        public string Embarazada
        {
            get { return m_embarazada; }

            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for m_embarazada", value, value.ToString());

                m_isChanged |= (m_embarazada != value); m_embarazada = value;
            }
        }

       

        public object getMarcadores()
        {

            string m_strSQL = @"  SELECT   orden     ,  marcador as tipo , allello1,allello2
  
	             FROM LAB_CasoMarcadores    as M

				    where   M.idprotocolo  in ("+this.IdProtocolo.ToString()+")  ";
            //left join LAB_Protocolo as P on P.idprotocolo = M.idprotocolo

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            return Ds.Tables[0];
        }

        public string NumeroOrigen
        {
            get { return m_numeroorigen; }

            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_numeroextraccion", value, value.ToString());

                m_isChanged |= (m_numeroorigen != value); m_numeroorigen = value;
            }
        }
        public string NumeroOrigen2
        {
            get { return m_numeroorigen2; }

            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_numeroorigen2", value, value.ToString());

                m_isChanged |= (m_numeroorigen2 != value); m_numeroorigen2 = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Observacion
		{
			get { return m_observacion; }

			set	
			{	
				if(  value != null &&  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Observaciones", value, value.ToString());
				
				m_isChanged |= (m_observacion != value); m_observacion = value;
			}
		}

        public string ObservacionResultado
        {
            get { return m_observacionResultado; }

            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for m_observacionResultado", value, value.ToString());

                m_isChanged |= (m_observacionResultado != value); m_observacionResultado = value;
            }
        }

        public string DescripcionProducto
        {
            get { return m_descripcionProducto; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_observacionResultado", value, value.ToString());

                m_isChanged |= (m_descripcionProducto != value); m_descripcionProducto = value;
            }
        }
        public string Sala
        {
            get { return m_sala; }

            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_sala", value, value.ToString());

                m_isChanged |= (m_sala != value); m_sala = value;
            }
        }

        public string Cama
        {
            get { return m_cama; }

            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_cama", value, value.ToString());

                m_isChanged |= (m_cama != value); m_cama = value;
            }
        }

        public bool tieneConsentimiento()
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            string m_strSQL = @" select * from LAB_Consentimiento where idPaciente=" + this.IdPaciente.IdPaciente.ToString();

            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);


          

            if (Ds.Tables[0].Rows.Count > 0)

                return true;
            else

                return false;
        }

        public bool VerificaIncidencia(int v)
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloIncidenciaCalidad));
            crit.Add(Expression.Eq("IdProtocolo", this.IdProtocolo));
            crit.Add(Expression.Eq("IdIncidenciaCalidad", v));


            IList items = crit.List();
            if (items.Count == 0) return false;
            else return true;
        }

        /// <summary>
        /// 0:Abierto; 1:En Proceso; 2:Cerrado; 
        /// </summary>
        public int Estado
        {
            get { return m_estado; }
            set
            {
                m_isChanged |= (m_estado != value);
                m_estado = value;
            }
        }


            public bool Notificarresultado
        {
            get { return m_notificarresultado; }
            set
            {
                m_isChanged |= (m_notificarresultado != value);
                m_notificarresultado = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public bool Alerta
        {
            get { return m_alerta; }
            set
            {
                m_isChanged |= (m_alerta != value);
                m_alerta = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
        public bool Baja
        {
            get { return m_baja; }
            set
            {
                m_isChanged |= ( m_baja != value ); 
                m_baja = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public bool Impreso
        {
            get { return m_impreso; }
            set
            {
                m_isChanged |= (m_impreso != value);
                m_impreso = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
        public int IdMuestra
        {
            get { return m_idmuestra; }
            set
            {
                m_isChanged |= (m_idmuestra != value);
                m_idmuestra = value;
            }
        }

        public int IdConservacion
        {
            get { return m_idconservacion; }
            set
            {
                m_isChanged |= (m_idconservacion != value);
                m_idconservacion = value;
            }
        }

        public DateTime FechaTomaMuestra
        {
            get { return m_fechatomamuestra; }
            set
            {
                m_isChanged |= (m_fechatomamuestra != value);
                m_fechatomamuestra = value;
            }

        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}
				

		#endregion 

        ///////////
        /// Metodos
        /// 
        public int GenerarNumero()
        {
            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), 1);

            int numerito = 0;

            if (oC.UtilizaNumeroEliminado) /// si la configuracion admite reutiliza numeros dados de baja entra acá
            {
                ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
                ///1.busco todos los protocolos dados de baja
                crit.Add(Expression.Eq("Baja", true));
                IList lista = crit.List();
                if (lista.Count > 0)
                {
                    //recorro los protocolos dados de baja
                    foreach (Protocolo oP in lista)
                    {
                        //Verifico si para ese numero existe otro numero igual dado de alta
                        ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
                        crit2.Add(Expression.Eq("Numero", oP.Numero));
                        crit2.Add(Expression.Eq("Baja", false));
                        

                        IList lista2 = crit2.List();
                        if (lista2.Count == 0) ///se puede usar el numero dado de baja por que no tiene uno igual dado de alta
                        {
                            numerito = oP.Numero;
                            break;
                        }
                        /////ver si está anulado
                        //if (oP.Baja) //si está anulado se reutiliza el numero
                        //    numerito = oP.Numero;
                        //else
                        //    numerito = oP.Numero + 1;
                    }
                }

            }

            if (numerito == 0)
            {
                Protocolo oUltimoProtocolo = new Protocolo();
                ICriteria crit3 = m_session.CreateCriteria(typeof(Protocolo));
               
                crit3.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo  order by IdProtocolo desc)"));
              //  crit3.Add(Expression.Sql(" IdProtocolo in (Select max (IdProtocolo) From LAb_Protocolo)"));
                oUltimoProtocolo =(Protocolo) crit3.UniqueResult();
                if (oUltimoProtocolo != null)
                    numerito = oUltimoProtocolo.Numero + 1;
                else
                    numerito = 1;                                   
            }

            return numerito;
        }

        public int GenerarNumeroMultiEfector(int idEfector)
        {

            Efector oEfector = new Efector();
            
            oEfector=(Efector)oEfector.Get(typeof(Efector), idEfector);


            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), "IdEfector", oEfector);

            int numerito = 0;

            if (oC.UtilizaNumeroEliminado) /// si la configuracion admite reutiliza numeros dados de baja entra acá
            {
                ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
                ///1.busco todos los protocolos dados de baja
                crit.Add(Expression.Eq("Baja", true));
                IList lista = crit.List();
                if (lista.Count > 0)
                {
                    //recorro los protocolos dados de baja
                    foreach (Protocolo oP in lista)
                    {
                        //Verifico si para ese numero existe otro numero igual dado de alta
                        ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
                        crit2.Add(Expression.Eq("Numero", oP.Numero));
                        crit2.Add(Expression.Eq("Baja", false));
                        crit2.Add(Expression.Eq("IdEfector", oEfector));


                        IList lista2 = crit2.List();
                        if (lista2.Count == 0) ///se puede usar el numero dado de baja por que no tiene uno igual dado de alta
                        {
                            numerito = oP.Numero;
                            break;
                        }
                        /////ver si está anulado
                        //if (oP.Baja) //si está anulado se reutiliza el numero
                        //    numerito = oP.Numero;
                        //else
                        //    numerito = oP.Numero + 1;
                    }
                }

            }

            if (numerito == 0)
            {
                Protocolo oUltimoProtocolo = new Protocolo();
                ICriteria crit3 = m_session.CreateCriteria(typeof(Protocolo));

                crit3.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where idEfector="+oEfector.IdEfector.ToString()+" order by IdProtocolo desc)"));
                //  crit3.Add(Expression.Sql(" IdProtocolo in (Select max (IdProtocolo) From LAb_Protocolo)"));
                oUltimoProtocolo = (Protocolo)crit3.UniqueResult();
                if (oUltimoProtocolo != null)
                    numerito = oUltimoProtocolo.Numero + 1;
                else
                    numerito = 1;
            }

            return numerito;
        }
        public bool tieneAdjuntoProtocolo()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloAnexo));
        
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdDetalleProtocolo", 0));
            IList lista = crit.List();
            if (lista.Count > 0)

                return true;
            else

                return false;

        }
        public bool tieneAdjuntoProtocoloVisible()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloAnexo));

            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdDetalleProtocolo", 0));
            crit.Add(Expression.Eq("Visible", true));
            IList lista = crit.List();
            if (lista.Count > 0)

                return true;
            else

                return false;

        }

        public string getPrimerAdjuntoVisible()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloAnexo));
            string url = "";
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("Visible", true));
            //crit.Add(Expression.Not(Expression.Eq("IdDetalleProtocolo", 0)));
            IList lista = crit.List();
            if (lista.Count > 0)
                foreach (ProtocoloAnexo oP in lista)
                {
                  url= oP.Url; 
                }
            return url;

        }
        public bool tieneAdjuntoVisible()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloAnexo));

            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("Visible", true));
            crit.Add(Expression.Not(Expression.Eq("IdDetalleProtocolo", 0)));
            IList lista = crit.List();
            if (lista.Count > 0)
                
                return true;
            else

                return false;

        }

        public bool tieneAdjuntoNoVisible()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloAnexo));

            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("Visible", false));
            crit.Add(Expression.Not(Expression.Eq("IdDetalleProtocolo", 0)));
            IList lista = crit.List();
            if (lista.Count > 0)

                return true;
            else

                return false;

        }

        public int GenerarNumeroDiario(string fecha)
        {
            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), 1);

            int numerito = 0;
            
            if (oC.UtilizaNumeroEliminado) /// si la configuracion admite reutiliza numeros dados de baja entra acá
            {
                ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
                ///1.busco todos los protocolos dados de baja
                crit.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where Baja=1 and fecha='" + fecha + "' order by IdProtocolo )"));

                IList lista = crit.List();
                if (lista.Count > 0)
                {
                    //recorro los protocolos dados de baja
                    foreach (Protocolo oP in lista)
                    {
                        //Verifico si para ese numero existe otro numero igual dado de alta
                        ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
                        crit2.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where NumeroDiario=" + oP.NumeroDiario + " and Baja=0 and fecha='" + fecha + "' order by IdProtocolo )"));
                        IList lista2 = crit2.List();
                        if (lista2.Count == 0) ///se puede usar el numero dado de baja por que no tiene uno igual dado de alta
                        {
                            numerito = oP.NumeroDiario;
                            break;
                        }
                    }
                }
            }

            if (numerito == 0)
            {
                Protocolo oUltimoProtocolo = new Protocolo();
                ICriteria crit3 = m_session.CreateCriteria(typeof(Protocolo));
                crit3.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where Fecha='" + fecha + "' order by NumeroDiario desc)"));
                oUltimoProtocolo = (Protocolo)crit3.UniqueResult();
                if (oUltimoProtocolo != null)
                    numerito = oUltimoProtocolo.NumeroDiario + 1;
                else
                    numerito = 1;

            }

            return numerito;
        }

        public int getEstadoCaso(string v)
        {
            Business.Data.Laboratorio.CasoFiliacion oCaso = new Business.Data.Laboratorio.CasoFiliacion();
            oCaso = (Business.Data.Laboratorio.CasoFiliacion)oCaso.Get(typeof(Business.Data.Laboratorio.CasoFiliacion), "IdCasoFiliacion", int.Parse(v));

            if (oCaso.Baja)
                return 3;
            if (oCaso.IdUsuarioValida > 0)
            {
                return 2;

            }
            else
             return   1;

        }



        public string GetNumero()
        {  
            Configuracion oC = new Configuracion();   oC = (Configuracion)oC.Get(typeof(Configuracion), 1);
            switch (oC.TipoNumeracionProtocolo )
            {
                case 0:  return this.Numero.ToString();
                case 1:  return this.NumeroDiario.ToString(); 
                case 2:  return this.PrefijoSector+ this.NumeroSector.ToString();
                default: return this.NumeroTipoServicio.ToString();
            }
        }

        public int GetResultadosPendientes()
        {
            int numerito = 0;
            //budsca los terminados pendientes de imprimir
            string m_strSQL = " SELECT COUNT(*) AS Cantidad FROM LAB_Protocolo (nolock) WHERE  (estado < 2) AND (baja = 0)";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            //conn.Close();
            //adapter.Dispose();
            if (Ds.Tables[0].Rows.Count > 0)
                numerito = int.Parse(Ds.Tables[0].Rows[0].ItemArray[0].ToString());

            return numerito;
        }

        public int GetPendientesImprimir()
        {
            int numerito = 0;
            //budsca los terminados pendientes de imprimir
            string m_strSQL = " SELECT COUNT(*) AS Cantidad FROM LAB_Protocolo (nolock) WHERE (estado = 2) AND (impreso = 0) AND (baja = 0)";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            //conn.Close();
            //adapter.Dispose();
            if (Ds.Tables[0].Rows.Count > 0)
               numerito= int.Parse( Ds.Tables[0].Rows[0].ItemArray[0].ToString());

            return numerito;
        }


        public int GetPendientesValidar()
        {
            int numerito = 0;
            //budsca los terminados pendientes de imprimir
            string m_strSQL = " SELECT COUNT(*) AS Cantidad FROM LAB_Protocolo (nolock) WHERE (estado = 1) AND (baja = 0)";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            //conn.Close();
            //adapter.Dispose();
            if (Ds.Tables[0].Rows.Count > 0)
                numerito = int.Parse(Ds.Tables[0].Rows[0].ItemArray[0].ToString());

            return numerito;
        }


        public DataTable GetDataSet(string tipo, string filtro, int tipoServicio, Configuracion oCon )        
        {
            string m_strFiltro = filtro;
                    

            string m_strOrden=   "  ";
            if (tipo != "Resultados")
            {
                ///impresion de un protocolo
                 //if (tipoServicio == 1)  //LABORATORIO
                     m_strFiltro = " WHERE idProtocolo="+IdProtocolo.ToString();
                //else
                  //  m_strFiltro = IdProtocolo.ToString();

                m_strOrden = " ORDER BY  idDetalleProtocolo";
            }
            else
            {
                //if (oCon.OrdenImpresionLaboratorio)
                //    m_strOrden = " ORDER BY idProtocolo,idDetalleProtocolo";
                //else
                //    m_strOrden = " ORDER BY idProtocolo, ordenArea, orden, orden1 ";

                if ((tipoServicio == 1) || (tipoServicio == 4))///laboratorio o pesquisa 
                {
                    if (oCon.OrdenImpresionLaboratorio)
                        m_strOrden = " ORDER BY idProtocolo,idDetalleProtocolo";
                    else
                        m_strOrden = " ORDER BY idProtocolo, ordenArea, orden, orden1 ";
                }
                if ((tipoServicio == 3) || (tipoServicio == 5)) ///MICROBIOLOGIA
                {
                    if (oCon.OrdenImpresionMicrobiologia)
                        m_strOrden = " ORDER BY idProtocolo,idDetalleProtocolo";
                    else
                        m_strOrden = " ORDER BY idProtocolo, ordenArea, orden, orden1 ";
                }
            }

            DataSet Ds = new DataSet();
               string m_strSQL = "";
               if ((tipoServicio ==1)|| (tipoServicio == 4) )  //LABORATORIO o pesquisa
               {

                //SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                //SqlCommand cmd = new SqlCommand();
                //cmd.CommandType = CommandType.StoredProcedure;
                //cmd.CommandText = "[LAB_ResultadoLaboratorio]";

                //cmd.Parameters.Add("@Filtro", SqlDbType.VarChar);
                //cmd.Parameters["@Filtro"].Value = m_strFiltro;

                //cmd.Parameters.Add("@orden", SqlDbType.VarChar);
                //cmd.Parameters["@orden"].Value = m_strOrden;


                //cmd.Connection = conn;
                //SqlDataAdapter da = new SqlDataAdapter(cmd);

                //da.Fill(Ds, "resultado"); 

                m_strSQL = @" SELECT  idProtocolo, estado, codigo, orden, apellido, nombre, edad, fechaNacimiento, sexo, numeroDocumento, fecha, domicilio, HC, prioridad, origen, area, 
                                 grupo, item, resultadoCar, resultadoNum, observaciones, esTitulo, derivado,  unidad, fechaEntrega, numero, hiv,
                               case when derivado='' then metodo else '' end as metodo, 
                              case when derivado='' then   ltrim(valorReferencia) else '' end as valorReferencia, 
                                 idDetalleProtocolo, muestra, case when solicitante is null then 'No informado' else solicitante end as solicitante, conresultado, formatoDecimal,idTipoResultado, 
                                CONVERT(varchar(20), formato0) AS formato0, 
                                 CONVERT(varchar(20), formato1) AS formato1,
                                CONVERT(varchar(20), formato2) AS formato2, 
                                CONVERT(varchar(20), formato3) AS formato3, 
                                 CONVERT(varchar(20), formato4) AS  formato4 , sector, sala, cama, firmante, embarazo , unidadEdad, observacionDetalle  
                                FROM vta_LAB_ImprimirResultados " + m_strFiltro + m_strOrden;
               
                SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                SqlDataAdapter adapter = new SqlDataAdapter();
                adapter.SelectCommand = new SqlCommand(m_strSQL, conn );
                adapter.Fill(Ds, "resultado");


            }
               if ((tipoServicio == 3)) ///MICROBIOLOGIA
               {
                  
                   SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                   SqlCommand cmd = new SqlCommand();
                   cmd.CommandType = CommandType.StoredProcedure;
                   cmd.CommandText = "LAB_ResultadoMicrobiologia2";                  

                   cmd.Parameters.Add("@Filtro", SqlDbType.VarChar);
                   cmd.Parameters["@Filtro"].Value = m_strFiltro;
                                    

                   cmd.Connection = conn;                   
                   SqlDataAdapter da = new SqlDataAdapter(cmd);

                   da.Fill(Ds,"resultado");
         

               }

            if ((tipoServicio == 5)) ///MICROBIOLOGIA
            {

                SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                SqlCommand cmd = new SqlCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "LAB_ResultadoNoPaciente";

                cmd.Parameters.Add("@Filtro", SqlDbType.VarChar);
                cmd.Parameters["@Filtro"].Value = m_strFiltro;


                cmd.Connection = conn;
                SqlDataAdapter da = new SqlDataAdapter(cmd);

                da.Fill(Ds, "resultado");


            }


            if (tipoServicio == 6) ///MICROBIOLOGIA
            {

                SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
                SqlCommand cmd = new SqlCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "LAB_ResultadoForense";

                cmd.Parameters.Add("@Filtro", SqlDbType.VarChar);
                cmd.Parameters["@Filtro"].Value = m_strFiltro;


                cmd.Connection = conn;
                SqlDataAdapter da = new SqlDataAdapter(cmd);

                da.Fill(Ds, "resultado");


            }
        

            ///Le agrega al datatable la imagen
            ///

            DataTable data = Ds.Tables[0]; 
            if (tipo=="Resultados")
            {
                if (Ds.Tables[0].Rows.Count > 0)
                {
                    
                   



                    data.Columns.Add("imagen", System.Type.GetType("System.Byte[]"));

                    for (int i = 0; i < data.Rows.Count; i++)
                    {
                         
                    

                        if ((tipoServicio == 3) || (tipoServicio == 5) || (tipoServicio == 6)) ///MICROBIOLOGIA
                        {
                            if (data.Rows[i][37].ToString() != "")
                            {
                                string ImageFile1 = System.Web.HttpContext.Current.Request.MapPath("../Resultados/" + data.Rows[i][17].ToString() + "/" + data.Rows[i][37].ToString());

                                FileStream fs1 = new FileStream(ImageFile1, FileMode.Open);
                                BinaryReader br1 = new BinaryReader(fs1);
                                data.Rows[i][38] = br1.ReadBytes((int)br1.BaseStream.Length);
                                br1 = null;
                                fs1.Close();
                                fs1 = null;
                            }
                        }
                        else

                        {
                            if (data.Rows[i][47].ToString() != "")
                            {
                                string ImageFile1 = System.Web.HttpContext.Current.Request.MapPath("../Resultados/" + data.Rows[i][25].ToString() + "/" + data.Rows[i][47].ToString());

                                FileStream fs1 = new FileStream(ImageFile1, FileMode.Open);
                                BinaryReader br1 = new BinaryReader(fs1);
                                data.Rows[i][38] = br1.ReadBytes((int)br1.BaseStream.Length);
                                br1 = null;
                                fs1.Close();
                                fs1 = null;
                            }
                        }


                    }

                   
                    if (oCon.RutaLogo != "")
                    {
                        string ImageFile = System.Web.HttpContext.Current.Request.MapPath("../Logo/" + oCon.RutaLogo);
                        data.Columns.Add("img", System.Type.GetType("System.Byte[]"));
                      

                        for (int i = 0; i < data.Rows.Count; i++)
                        {
                            FileStream fs = new FileStream(ImageFile, FileMode.Open);
                            BinaryReader br = new BinaryReader(fs);
                            data.Rows[i][39] = br.ReadBytes((int)br.BaseStream.Length);
                            br = null;
                            fs.Close();
                            fs = null;
                        }
                          
                    }



                    GeneraCodigoQR oGenera = new GeneraCodigoQR();
                    string param = "";
                    //Add the Barcode column to the DataSet
                    Ds.Tables[0].Columns.Add(new DataColumn("CodigoQR", typeof(byte[])));
                    for (int i = 0; i < data.Rows.Count; i++)
                    {
                        if (i == 0)
                        {

                            int i_idProtocolo = int.Parse(data.Rows[i][0].ToString());
                            Protocolo oProtocolo = new Protocolo();

                            oProtocolo = (Protocolo)oProtocolo.Get(typeof(Protocolo), i_idProtocolo);


                            Business.Utility oUtil = new Business.Utility();
                            string s_idEfector = "0";
                            if (oCon.IdEfector.IdEfector.ToString() == "228")
                                s_idEfector = "228";

                              param = oUtil.EncryptarNet(s_idEfector + "n" + oProtocolo.IdProtocolo.ToString(), "SIL", 256);
                        }
                        string s_url = oCon.UrlResultadosQR + "?de=" + param; /// definir cual es la url a la que llevará el QR: url de la base de datos o web.config + el numero de protocolo.
                        ////qrcode.CodeToEncode = (int)dr["id_venta"] + "";

                        byte[] imageData = oGenera.ConvertirQR(s_url);  /// definir cual es la url a la que llevará el QR
                        data.Rows[i]["CodigoQR"] = imageData;
                        ////OpcionBusqueda = dr["OpcionBusqueda"].ToString();
                    }
                    //============================================================================




                }
            }
            return data;


        }


        

      

        public string getMuestra()
        {
           string s_muestra = "";
            if (this.IdMuestra!=0)
            { 
            Muestra oItem = new Muestra();
            oItem = (Muestra)oItem.Get(typeof(Muestra), this.IdMuestra);
                s_muestra = oItem.Nombre + " " + this.DescripcionProducto;
        }
            return s_muestra;
    }
        public DateTime CalcularCalendarioEntrega(DateTime fechaentrega)
        {
            int diaEntrega = (int)fechaentrega.DayOfWeek;
            bool seguirBuscando = true;
            DateTime fecha = fechaentrega;

            CalendarioEntrega oItem = new CalendarioEntrega();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(CalendarioEntrega));
            crit.Add(Expression.Eq("IdEfector", this.IdEfector));
            int dif = 0;
            IList items = crit.List();
            foreach (CalendarioEntrega oDia in items)
            {
                if (oDia.Dia == diaEntrega) { fecha = fechaentrega; seguirBuscando = false; break; }
            }

            if (seguirBuscando)
                foreach (CalendarioEntrega oDia in items)
                {
                    if (diaEntrega < oDia.Dia) { dif = oDia.Dia - diaEntrega; fecha = fechaentrega.AddDays(dif); seguirBuscando = false; break; }
                }

            if (seguirBuscando)
                foreach (CalendarioEntrega oDia in items)
                {
                    if (diaEntrega > oDia.Dia) 
                    { 
                        dif = diaEntrega - oDia.Dia - 7;
                        if (dif < 0) dif = dif * (-1);
                        fecha = fechaentrega.AddDays(dif); break; 
                    }
                }

            return fecha;
        }

        public bool EnProceso()
        {
            bool enproceso = false;
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
            crit.Add(Expression.Eq("IdProtocolo", this));
            //crit.Add(Expression.Eq("IdEfector", this.IdEfector));
            

            IList detalle = crit.List();
            if (detalle.Count > 0)
            {
                foreach (DetalleProtocolo oDetalle in detalle)
                {

                    if (oDetalle.IdUsuarioResultado > 0)
                    {
                        enproceso = true;
                        break;
                    }
                    if (oDetalle.IdUsuarioControl > 0)
                    {
                        enproceso = true;
                        break;
                    }
                    if (oDetalle.IdUsuarioValida > 0)
                    {
                        enproceso = true;
                        break;
                    }
                    if (oDetalle.Enviado > 1)
                    {
                        enproceso = true;
                        break;
                    }
                    if (oDetalle.IdUsuarioObservacion > 0)
                    {
                        enproceso = true;
                        break;
                    }
                    if (oDetalle.IdUsuarioValidaObservacion > 0)
                    {
                        enproceso = true;
                        break;
                    }
                }
            }
            return enproceso;
        }

        public void ActualizarResultados(string s_operacion, int i_idusuario)
        {
            ///Esta funcion pone como cargados los item del tipo compuestos.

            
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdEfector", this.IdEfector));

            IList detalle = crit.List();
            if (detalle.Count > 0)
            {
                foreach (DetalleProtocolo oDet in detalle)
                {

                    if (oDet.IdSubItem.IdCategoria == 1) //revisar: si es compuesto y tiene hijos con resultados
                    {

                        if (HijosTieneResultado(oDet))
                        {
                            oDet.ConResultado = true;
                            if (s_operacion == "Carga")
                            {
                                oDet.IdUsuarioResultado = i_idusuario;
                                oDet.FechaResultado = DateTime.Now;
                            }
                            else
                            {
                                oDet.IdUsuarioValida = i_idusuario;
                                oDet.FechaValida = DateTime.Now;
                            }
                            oDet.Save();
                        }
                    }

                    if (oDet.IdSubItem.IdEfectorDerivacion != oDet.IdSubItem.IdEfector) //derivado
                    {


                        Derivacion oDeriva = new Derivacion();
                        oDeriva = (Derivacion)oDeriva.Get(typeof(Derivacion), "IdDetalleProtocolo", oDet);
                        if (oDeriva != null)  /// esta pendiente
                        {
                            if (oDeriva.Estado == 1) /// enviado
                                oDet.ResultadoCar = "Derivado: " + oDet.IdSubItem.IdEfectorDerivacion.Nombre;
                            if (oDeriva.Estado == 2) /// no enviado
                                oDet.ResultadoCar = " No Derivado. " + oDeriva.Observacion;

                        }
                        else { oDet.ResultadoCar = "Pendiente de derivar"; }

                            if (s_operacion == "Carga")
                            {
                                oDet.IdUsuarioResultado = i_idusuario;
                                oDet.FechaResultado = DateTime.Now;
                            }
                            else
                            {
                                oDet.IdUsuarioValida = i_idusuario;
                                oDet.FechaValida = DateTime.Now;
                            }
                            oDet.Save();
                        
                    }

                    
                }
            }
           
        }

        private bool HijosTieneResultado(DetalleProtocolo oDetalle)
        {
            bool hay = true;
            string conResultado = "";
            ///trae los hijos que tiene en detalle
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(PracticaDeterminacion));
            crit.Add(Expression.Eq("IdItemPractica", oDetalle.IdSubItem));
            //crit.Add(Expression.Eq("IdEfector", this.IdEfector));

            IList detalle = crit.List();
            if (detalle.Count > 0)
            {
                foreach (PracticaDeterminacion oHijo in detalle)
                {
                    hay = false;

                    string m_strSQL = " SELECT   CASE WHEN trajoMuestra = 'Si' THEN conresultado ELSE CAST(1 AS bit) END AS conResultado "+
                        " FROM LAB_DetalleProtocolo WHERE     idProtocolo =" + oDetalle.IdProtocolo.IdProtocolo.ToString() + " AND idSubItem = " + oHijo.IdItemDeterminacion.ToString();

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

                    if (Ds.Tables[0].Rows.Count > 0)
                    conResultado = Ds.Tables[0].Rows[0].ItemArray[0].ToString();

                    if (conResultado == "True")
                    { hay = true; break; }
                }                
            }
            else
                hay = false;
            return hay;
        }


        public bool ValidadoTotal(string s_operacion, int i_idusuario)
        {
            bool validado = true;
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdEfector", this.IdEfector));
            crit.Add(Expression.Eq("Informable", true));

            IList detalle = crit.List();
            if (detalle.Count > 0)
            {
                foreach (DetalleProtocolo oDetalle in detalle)
                {
                    if ((oDetalle.IdUsuarioValida > 0)||(oDetalle.IdUsuarioValidaObservacion > 0))
                        validado = true;
                    else
                    {
                        

                        if (oDetalle.IdSubItem.IdCategoria == 1) //compuesto
                            validado = true;
                        else
                        {
                            if (oDetalle.TrajoMuestra == "No") //sin muestra
                            {
                                validado = true;
                                if (s_operacion == "Carga")
                                {
                                    oDetalle.IdUsuarioResultado = i_idusuario;
                                    oDetalle.FechaResultado = DateTime.Now;
                                }
                                else
                                {
                                    oDetalle.IdUsuarioValida = i_idusuario;
                                    oDetalle.FechaValida = DateTime.Now;
                                }
                                oDetalle.Save();
                            }
                            else
                            {
                                if (oDetalle.IdSubItem.IdEfectorDerivacion != oDetalle.IdSubItem.IdEfector) //derivado
                                {

 
                                        validado = true;
                                    
                                }
                                else
                                {
                                    validado = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return validado;
        }



        public void CalcularFormulas(string s_operacion, int i_idusuario, bool solovacio)
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdEfector", this.IdEfector));
            crit.Add(Expression.Eq("TrajoMuestra", "Si"));
            
            if (solovacio)   // solo detalle sin resultados
            {
                crit.Add(Expression.Eq("ConResultado",false));
            }

            IList lista = crit.List();
 
            if (lista.Count > 0)
            {
                foreach (DetalleProtocolo oDet in lista)
                {                   
                    ICriteria critFormula = m_session.CreateCriteria(typeof(Formula));
                    critFormula.Add(Expression.Eq("IdItem", oDet.IdSubItem));
                    critFormula.Add(Expression.Eq("IdTipoFormula", 1));
                    critFormula.Add(Expression.Eq("Baja", false));
                    IList lista2 = critFormula.List();
                    foreach (Formula oFormula in lista2)
                    {
                        bool sicalcula = false;
                        if ((oDet.IdProtocolo.Sexo == oFormula.Sexo) || (oFormula.Sexo == "I")) // coincide el sexo del paciente o el sexo del valor de referencia es Indistinto
                        {
                            bool cumpleCondicion = true;
                            if (oFormula.CondicionDeterminacion != "")
                                cumpleCondicion = VerificarCondicionFormula(oFormula);

                            int idraza = oFormula.IdRaza;
                            int edadDesde = oFormula.EdadDesde;
                            int edadHasta = oFormula.EdadHasta;
                            int unidadEdad = oFormula.UnidadEdad;
                            
                           

                            if  (unidadEdad == -1)
                               if (cumpleCondicion) sicalcula = true;
                            else
                            {
                               
                                if ((unidadEdad == oDet.IdProtocolo.UnidadEdad) 
                                    && (edadDesde <= oDet.IdProtocolo.Edad)
                                    && (edadHasta >= oDet.IdProtocolo.Edad)
                                    && cumpleCondicion)
                                    sicalcula = true;
                                ///evaluar si la condicion de determinacion habilita el calculo de la formula
                            }

                          

                            if (idraza == 1)  // si es afro
                            {
                                if (idraza == oDet.IdProtocolo.IdPaciente.IdRaza)
                                    sicalcula = true;
                                else
                                    sicalcula = false;
                            }
                            if (idraza == 0)
                            {
                                if ( oDet.IdProtocolo.IdPaciente.IdRaza!=1)
                                    sicalcula = true;
                                else
                                    sicalcula = false;
                            }

                        }

                        if (sicalcula)
                        {
                            string formulacalculada = oFormula.ContenidoFormula.ToUpper().TrimEnd(); 
                            string aux = oFormula.ContenidoFormula.Replace("+", ";").ToUpper().TrimEnd();  
                            aux = aux.Replace("-", ";");
                            aux = aux.Replace("/", ";");
                            aux = aux.Replace("\\", ";");
                            aux = aux.Replace("*", ";");
                            aux = aux.Replace("(", ";");
                            aux = aux.Replace(")", ";");
                            aux = aux.Replace("!", ";");
                            aux = aux.Replace("^", ";");
                            aux = aux.ToLower().Replace("mod", ";");
                            aux = aux.ToLower().Replace("min", ";");
                            aux = aux.ToLower().Replace("max", ";");
                            aux = aux.ToLower().Replace("sin", ";");
                            aux = aux.ToLower().Replace("cos", ";");
                            aux = aux.ToLower().Replace("tan", ";");
                            aux = aux.ToLower().Replace("atan", ";");
                            aux = aux.ToLower().Replace("abs", ";");
                            aux = aux.ToLower().Replace("log", ";");
                            aux = aux.ToLower().Replace("ceil", ";");
                            aux = aux.ToLower().Replace("int", ";");
                            aux = aux.ToLower().Replace("frac", ";");
                            aux = aux.ToLower().Replace("sqr", ";");
                            aux = aux.ToUpper().Replace("EDAD", "EDAD");
                            bool sinvalor = false;
                            string[] arr = aux.ToUpper().Split((";").ToCharArray());
                            foreach (string m in arr)
                            {
                                if (m.Length > 0)
                                {
                                    if (m.Substring(0, 1) == "[")
                                    {
                                        string codigoDet = m.Replace("[", "");
                                        codigoDet = codigoDet.Replace("]", "");
                                        decimal valorEncontrado = 0;

                                        if (codigoDet.ToUpper() == "EDAD")
                                            valorEncontrado = decimal.Parse(this.Edad.ToString());
                                        else

                                            valorEncontrado = BuscarResultadoItemenBase(codigoDet);
                                        if (valorEncontrado == -99999)
                                        {
                                            sinvalor = true;
                                            break;
                                        }
                                        formulacalculada = formulacalculada.ToUpper().Replace("[" + codigoDet+ "]", valorEncontrado.ToString());
                                        formulacalculada = formulacalculada.ToUpper().Replace(".", ","); ///reemplazo puntos por comas en los numeros decimales; para aplicar la funcion Evaluate.                                                                                                                       

                                    }
                                }
                                //else
                                //    formulacalculada = m;

                            }

                            //      valor =System.Web.UI.s formulacalculada.
                            if (!sinvalor)
                            {
                                Parser p = new Parser();
                                double resultado = 0;
                                if (p.Evaluate(formulacalculada))
                                {
                                    resultado = p.Result;

                                    oDet.ResultadoNum = Math.Round(decimal.Parse(resultado.ToString()), oDet.IdSubItem.FormatoDecimal);
                                    oDet.ConResultado = true;

                                    if (s_operacion == "Carga")
                                    {
                                        if (oDet.ConResultado)
                                        {
                                            oDet.IdUsuarioResultado = i_idusuario;
                                            oDet.FechaResultado = DateTime.Now;
                                        }
                                    }
                                    else
                                    {
                                        oDet.IdUsuarioValida = i_idusuario;
                                        oDet.FechaValida = DateTime.Now;
                                    }
                                    oDet.Save();
                                }
                            }
                        }
                        //valor = resultado.ToString();
                    }
                }
            }
            //return valor;


            //string valorFormula= GetValorFormula(oDetalle.IdSubItem);
            //if (valorFormula!="NA")
            //oDetalle.ResultadoNum = decimal.Parse( valorFormula);

        }

        public  bool VerificarCondicionFormula(Formula oFormula)
        {
            string formulacalculada = oFormula.CondicionDeterminacion;
            string aux = oFormula.CondicionDeterminacion.Replace("+", ";");
            aux = aux.Replace("-", ";");
            aux = aux.Replace("/", ";");
            aux = aux.Replace("\\", ";");
            aux = aux.Replace("*", ";");
            aux = aux.Replace("(", ";");
            aux = aux.Replace(")", ";");
            aux = aux.Replace("!", ";");
            aux = aux.Replace("^", ";");
            aux = aux.ToLower().Replace("mod", ";");
            aux = aux.ToLower().Replace("min", ";");
            aux = aux.ToLower().Replace("max", ";");
            aux = aux.ToLower().Replace("sin", ";");
            aux = aux.ToLower().Replace("cos", ";");
            aux = aux.ToLower().Replace("tan", ";");
            aux = aux.ToLower().Replace("atan", ";");
            aux = aux.ToLower().Replace("abs", ";");
            aux = aux.ToLower().Replace("log", ";");
            aux = aux.ToLower().Replace("ceil", ";");
            aux = aux.ToLower().Replace("int", ";");
            aux = aux.ToLower().Replace("frac", ";");
            aux = aux.ToLower().Replace("sqr", ";");
            aux = aux.ToLower().Replace(">=", ";");
            aux = aux.ToLower().Replace(">", ";");
            aux = aux.ToLower().Replace("<=", ";");
            aux = aux.ToLower().Replace("<", ";");
            aux = aux.ToLower().Replace("=", ";");

            string[] arr = aux.Split((";").ToCharArray());
            foreach (string m in arr)
            {
                if (m.Length > 0)
                {
                    if (m.Substring(0, 1) == "[")
                    {
                        string codigoDet = m.Replace("[", "");
                        codigoDet = codigoDet.Replace("]", "");
                        decimal valorEncontrado =  BuscarResultadoItemenBase(codigoDet);
                        if (valorEncontrado == -99999) break;
                        else
                        {
                            formulacalculada = formulacalculada.Replace("[" + codigoDet.ToUpper() + "]", valorEncontrado.ToString());
                            formulacalculada = formulacalculada.Replace(".", ","); ///reemplazo puntos por comas en los numeros decimales; para aplicar la funcion Evaluate.                                                                                                                       
                        }
                    }
                }
                //else
                //    formulacalculada = m;

            }

            bool ok = false;
            try
            {
                string[] arr1 = formulacalculada.Split((",").ToCharArray());
                if (formulacalculada.Contains(">="))
                {
                    arr1 = formulacalculada.Split((">=").ToCharArray());
                    if (double.Parse(arr1[0].ToString()) >= double.Parse(arr1[2].ToString())) ok = true;
                }
                if ((formulacalculada.Contains(">")) && (!ok))
                {
                    arr1 = formulacalculada.Split((">").ToCharArray());
                    if (double.Parse(arr1[0].ToString()) > double.Parse(arr1[1].ToString())) ok = true;
                }
                if ((formulacalculada.Contains("<=")) && (!ok))
                {
                    arr1 = formulacalculada.Split(("<=").ToCharArray());
                    if (double.Parse(arr1[0].ToString()) <= double.Parse(arr1[2].ToString())) ok = true;
                }
                if ((formulacalculada.Contains("<")) && (!ok))
                {
                    arr1 = formulacalculada.Split(("<").ToCharArray());
                    if (double.Parse(arr1[0].ToString()) < double.Parse(arr1[1].ToString())) ok = true;
                }
                if ((formulacalculada.Contains("=")) && (!ok))
                {
                    arr1 = formulacalculada.Split(("=").ToCharArray());
                    if (double.Parse(arr1[0].ToString()) == double.Parse(arr1[1].ToString())) ok = true;
                }
            }
            catch
            { ok = false; }
                return ok;
        }

        public string getListaAreasCodigoBarras()
        {
            string lista = "-1";

            string m_ssql = @"select idArea, nombre from Lab_Area  A with (nolock)
                            WHERE imprimeCodigoBarra=1  and baja=0
                            and exists (select 1 from lab_detalleprotocolo dp with (nolock)
                                        inner  join lab_item P with (nolock) on dp.idsubitem = p.iditem
                                        where dp.idProtocolo = " + this.IdProtocolo.ToString() + @"
                                        and dp.trajoMuestra = 'Si'
                                        and p.idarea = A.idArea) order by nombre";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_ssql, conn);
            adapter.Fill(Ds);

            for (int i = 0; i < Ds.Tables[0].Rows.Count; i++)
            {
                //if (lista == "")
                //    lista = Ds.Tables[0].Rows[i][0].ToString();
                //else
                    lista += "," + Ds.Tables[0].Rows[i][0].ToString();
                //ListItem oDia = new ListItem();
                //oDia.Text = Ds.Tables[0].Rows[i][1].ToString();
                //oDia.Value = Ds.Tables[0].Rows[i][0].ToString();
                //lstDiagnosticos.Items.Add(oDia);


            }


         
            return lista;
        }

        public bool VerificaObligatoriedadFIS()
        {
            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), "IdConfiguracion", 1);
            bool obligafis = false;

            string[] arrfis = oC.FISCaracter.Split((",").ToCharArray());
            foreach (string item in arrfis)
            {
                if (item ==this.IdCaracter.ToString())
                { obligafis = true; break; }
            }
            return obligafis;
 
    }

        public bool VerificarProtocoloAnterior(int dias)
        {


            string tieneingreso = this.IdPaciente.GetProtocolosReciente(dias,"3",this);
            if (tieneingreso != "") return false;
            else return true;
        }

        private decimal BuscarResultadoItemenBase(string codigoDet)
        {
            Utility oUtil= new Utility();
            decimal valor = 0;
            Item oItem = new Item();
            oItem = (Item)oItem.Get(typeof(Item), "Codigo", codigoDet,"Baja",false);
            if (oItem != null)
            {
                if (oItem.IdTipoResultado == 1)
                {
                    ISession m_session = NHibernateHttpModule.CurrentSession;
                    ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
                    crit.Add(Expression.Eq("IdProtocolo", this));
                    crit.Add(Expression.Eq("IdEfector", this.IdEfector));
                    crit.Add(Expression.Eq("IdSubItem", oItem));              

                    DetalleProtocolo odet = (DetalleProtocolo)crit.UniqueResult();
                    if (odet != null)
                    {
                        if (odet.ConResultado)
                        {
                            if (odet.IdSubItem.IdTipoResultado == 2)/// texto
                            {
                                if (oUtil.EsNumerico(odet.ResultadoCar)) valor = decimal.Parse(odet.ResultadoCar);
                            }
                            if (odet.IdSubItem.IdTipoResultado == 1)/// numerico
                                valor = odet.ResultadoNum;
                        }
                        else
                            valor = -99999;
                    }
                    else valor = -99999;
                }
            }
            else valor = -99999;
            return valor;
        }

        public int GenerarNumeroGrupo(SectorServicio oSector)
        {
            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), 1);
            int numerito = 0;

            if (oC.UtilizaNumeroEliminado) /// si la configuracion admite reutiliza numeros dados de baja entra acá
            {
                ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
                ///1.busco todos los protocolos dados de baja
                crit.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where Baja=1 and idSector=" + oSector.IdSectorServicio.ToString() + " order by IdProtocolo )"));

                IList lista = crit.List();
                if (lista.Count > 0)
                {
                    //recorro los protocolos dados de baja
                    foreach (Protocolo oP in lista)
                    {
                        //Verifico si para ese numero existe otro numero igual dado de alta
                        ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
                        crit2.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where NumeroSector=" + oP.NumeroSector + " and Baja=0 and idSector=" + oSector.IdSectorServicio.ToString() + " order by IdProtocolo )"));
                        IList lista2 = crit2.List();
                        if (lista2.Count == 0) ///se puede usar el numero dado de baja por que no tiene uno igual dado de alta
                        {
                            numerito = oP.NumeroSector;
                            break;
                        }
                    }
                }
            }

            if (numerito == 0)
            {
                Protocolo oUltimoProtocolo = new Protocolo();
                ICriteria crit3 = m_session.CreateCriteria(typeof(Protocolo));
                crit3.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where idSector=" + oSector.IdSectorServicio.ToString() + " order by NumeroSector desc)"));
                oUltimoProtocolo = (Protocolo)crit3.UniqueResult();
                if (oUltimoProtocolo != null)
                    numerito = oUltimoProtocolo.NumeroSector + 1;
                else
                    numerito = 1;
            }

            return numerito;

        }


        public int GenerarNumeroTipoServicio(TipoServicio oServicio)
        {
            Configuracion oC = new Configuracion();
            oC = (Configuracion)oC.Get(typeof(Configuracion), 1);
            int numerito = 0;

            if (oC.UtilizaNumeroEliminado) /// si la configuracion admite reutiliza numeros dados de baja entra acá
            {
                ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
                ///1.busco todos los protocolos dados de baja
                crit.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where Baja=1 and idTipoServicio=" + oServicio.IdTipoServicio.ToString() + " order by IdProtocolo )"));

                IList lista = crit.List();
                if (lista.Count > 0)
                {
                    //recorro los protocolos dados de baja
                    foreach (Protocolo oP in lista)
                    {
                        //Verifico si para ese numero existe otro numero igual dado de alta
                        ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
                        crit2.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where NumeroTipoServicio=" + oP.NumeroTipoServicio + " and Baja=0 and IdTipoServicio=" +oServicio.IdTipoServicio.ToString() + " order by IdProtocolo )"));
                        IList lista2 = crit2.List();
                        if (lista2.Count == 0) ///se puede usar el numero dado de baja por que no tiene uno igual dado de alta
                        {
                            numerito = oP.NumeroTipoServicio;
                            break;
                        }
                    }
                }
            }

            if (numerito == 0)
            {
                Protocolo oUltimoProtocolo = new Protocolo();
                ICriteria crit3 = m_session.CreateCriteria(typeof(Protocolo));
                crit3.Add(Expression.Sql(" IdProtocolo in (Select top 1 IdProtocolo From LAb_Protocolo where IdTipoServicio=" + oServicio.IdTipoServicio.ToString() + " order by NumeroTipoServicio desc)"));
                oUltimoProtocolo = (Protocolo)crit3.UniqueResult();
                if (oUltimoProtocolo != null)
                    numerito = oUltimoProtocolo.NumeroTipoServicio + 1;
                else
                    numerito = 1;
            }

            return numerito;

        }

        public object GetDataSetCodigoBarras(string p, string s_listaAreas, int tipoServicio, bool adicionalGeneral)        
        {            
            
         
            string m_strSQL = @" SELECT  [idProtocolo]      ,[idArea]      ,[numeroP]      ,[area]
            ,[Fecha]      ,[Origen]      ,[Sector]      ,[NumeroOrigen]      ,[NumeroDocumento]      ,[apellido]      ,[Sexo]      ,[edad],pacientecodificado,
            [NumeroOrigen2] 
            FROM vta_LAB_GeneraCodigoBarras
       
            WHERE    (idArea IN (" + s_listaAreas + ")) AND idProtocolo =" + this.IdProtocolo.ToString();
            //   WHERE   idProtocolo =" + this.IdProtocolo.ToString();
            if (adicionalGeneral)
            {
                m_strSQL  = @"  
                SELECT [idProtocolo]      ,[idArea]      ,[numeroP]      ,[area]
                ,[Fecha]      ,[Origen]      ,[Sector]      ,[NumeroOrigen]      ,[NumeroDocumento]      ,[apellido]      ,[Sexo]      ,[edad], pacientecodificado,
                [NumeroOrigen2] 
                FROM vta_LAB_GeneraCodigoBarrasGeneral                    
                WHERE    idProtocolo =" + this.IdProtocolo.ToString();
            }
            if (this.IdTipoServicio.IdTipoServicio == 6) // forense
            {
                m_strSQL = @"SELECT DISTINCT 
                      P.idProtocolo, 0 as idArea,convert(varchar,P.numero) + '-'+convert(varchar,F.idCasoFiliacion ) AS numeroP, 'Forense' area,  P.fecha, O.nombre AS Origen, SS.prefijo AS Sector, P.numeroOrigen, 
                      0 as numeroDocumento, 'FALSE' as apellido , P.sexo, CONVERT(varchar, P.edad) 
                      + '' + CASE P.unidadEdad WHEN 0 THEN 'a' WHEN 1 THEN 'm' WHEN 2 THEN 'd' END AS edad, ' ' AS pacientecodificado, P.numeroOrigen2
FROM         dbo.LAB_Protocolo AS P 
  INNER JOIN   dbo.LAB_Origen AS O ON P.idOrigen = O.idOrigen 
  INNER JOIN   dbo.LAB_SectorServicio AS SS ON P.idSector = SS.idSectorServicio 
  inner join LAB_CasoFiliacionProtocolo as F on F.idProtocolo = P.idProtocolo
Where P.baja=0  and P.idProtocolo =" + this.IdProtocolo.ToString();
            }
            if (this.IdTipoServicio.IdTipoServicio == 5) // forense
            {
                m_strSQL =  @" SELECT DISTINCT [idProtocolo]      ,[idArea]      ,[numeroP]      ,[area]
            ,[Fecha]      ,[Origen]      ,[Sector]      ,[NumeroOrigen]      ,[NumeroDocumento]      ,[apellido]      ,[Sexo]      ,[edad],pacientecodificado,
            [NumeroOrigen2] 
            FROM vta_LAB_GeneraCodigoBarras
       
            WHERE    (idArea IN (" + s_listaAreas + ")) AND idProtocolo =" + this.IdProtocolo.ToString();
            }


            m_strSQL += " ORDER BY idArea";

            
            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds, "resultado");

            
            DataTable data = Ds.Tables[0];
            return data;
        }


        public void GrabarAuditoriaProtocolo(string m_accion, int m_idusuario)
        {
            AuditoriaProtocolo oRegistro = new AuditoriaProtocolo();
            oRegistro.Accion = m_accion;
            oRegistro.Fecha = DateTime.Now;
            oRegistro.Hora = DateTime.Now.ToLongTimeString();
            oRegistro.IdProtocolo = this.IdProtocolo;
            oRegistro.IdUsuario = m_idusuario;
            oRegistro.Save();
        }

        public void GrabarAuditoriaDetalleProtocolo(string m_accion, int m_idusuario,string m_observacion, string m_resultado)
        {
            AuditoriaProtocolo oRegistro = new AuditoriaProtocolo();
            oRegistro.Accion = m_accion;
            oRegistro.Analisis = m_observacion;
            oRegistro.Valor = m_resultado;
            oRegistro.Fecha = DateTime.Now;
            oRegistro.Hora = DateTime.Now.ToLongTimeString();
            oRegistro.IdProtocolo = this.IdProtocolo;
            oRegistro.IdUsuario = m_idusuario;
            oRegistro.Save();
        }

        public object GetDataSetAuditoria()
        {
            string m_strSQL = @" SELECT     P.numero AS numero, U.username, CONVERT(varchar(10), A.fecha, 103) AS fecha, A.hora, A.accion, A.analisis, A.valor, A.valorAnterior
FROM         LAB_AuditoriaProtocolo AS A INNER JOIN
lab_protocolo P on P.idprotocolo= A.idprotocolo
                      Sys_Usuario AS U ON A.idUsuario = U.idUsuario
where a.idprotocolo=" + this.IdProtocolo.ToString()+
" ORDER BY A.idAuditoriaProtocolo";       

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds, "auditoria");

            DataTable data = Ds.Tables[0];
            return data;
        }

        public string GetPracticasPedidas()
        {
            string s_practicas = "";
            DetalleProtocolo oDetalle = new DetalleProtocolo();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("Informable", true));
            crit.AddOrder(Order.Asc("IdDetalleProtocolo"));

            IList items = crit.List();
            string pivot = "";
            string sDatos = "";
            foreach (DetalleProtocolo oDet in items)
            {
                if (pivot != oDet.IdItem.Nombre)
                {
                    if (sDatos == "")
                        sDatos = oDet.IdItem.Nombre;
                    else
                        sDatos += " - " + oDet.IdItem.Nombre;
                    //sDatos += "#" + oDet.IdItem.Codigo + "#" + oDet.IdItem.Nombre + "#" + oDet.TrajoMuestra + "@";                   
                    pivot = oDet.IdItem.Nombre;
                }

            }

            s_practicas = sDatos;
            return s_practicas;
        }

        public void ActualizarNumeroDesdeID()
        {
            int dif = 0;
            Configuracion oCon = new Configuracion(); oCon = (Configuracion)oCon.Get(typeof(Configuracion), 1);
            if (oCon!=null)
            {
                dif = oCon.NroProtocolo;
            }


   
            int aux = this.IdProtocolo - dif;
            if (aux == 0)  aux = 1;
            this.Numero = aux;
            this.Save();
               

            
        }

        //public void VerificarExisteNumeroAsignado()
        //{
        //    ICriteria crit2 = m_session.CreateCriteria(typeof(Protocolo));
        //    crit2.Add(Expression.Eq("Numero",this.Numero));
        //    crit2.Add(Expression.Eq("Baja", false));

        //    IList lista2 = crit2.List();
         
        //    foreach (Protocolo oP in lista2)
        //    {
        //        if (oP!=this)
        //        {   
        //            this.Numero = this.GenerarNumero();
        //            this.Save();
        //        }
        //    }
         
            
        //}

        public DataTable GetDataSetComprobante()
        {
            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;


            cmd.CommandText = "[LAB_ListaProtocolo]";

            cmd.Parameters.Add("@FiltroBusqueda", SqlDbType.NVarChar);
            cmd.Parameters["@FiltroBusqueda"].Value = " P.idProtocolo= " + this.IdProtocolo.ToString();

            cmd.Parameters.Add("@TipoLista", SqlDbType.Int);
            cmd.Parameters["@TipoLista"].Value = "2";

            cmd.Parameters.Add("@idArea", SqlDbType.Int);
            cmd.Parameters["@idArea"].Value = "0";

            cmd.Parameters.Add("@idItem", SqlDbType.Int);
            cmd.Parameters["@idItem"].Value = "0";

            cmd.Connection = conn;


            SqlDataAdapter da = new SqlDataAdapter(cmd);

            da.Fill(Ds);
            //////////

            DataTable data = Ds.Tables[0]; 
            
            return data;
        }

        public void ImprimirCodigoBarras(string impresora, int idUser)
        {
           
            ConfiguracionCodigoBarra oDetalle = new ConfiguracionCodigoBarra();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ConfiguracionCodigoBarra));
            crit.Add(Expression.Eq("IdTipoServicio", this.IdTipoServicio ));
            crit.Add(Expression.Eq("Habilitado", true));
            crit.Add(Expression.Eq("IdEfector", this.IdEfector));

            IList items = crit.List();

            if (items.Count  > 0)
            {              
                SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;

                string query = @"INSERT INTO [dbo].[LAB_ProtocoloEtiqueta]
           (idProtocolo ,idEfector    ,idArea ,idItem   ,impresora,fechaRegistro      )
     VALUES       ( " + this.IdProtocolo.ToString() +"," + this.IdEfector.IdEfector.ToString()+ ",0,0,'" + impresora + "' , getdate()    )";
                SqlCommand cmd = new SqlCommand(query, conn);


                int idres = Convert.ToInt32(cmd.ExecuteScalar());
                if (idres>=0)
                    this.GrabarAuditoriaProtocolo("Imprime Código Barras ", idUser);
            }

         
    }

        public string GetDiagnostico()
        {
            string diag = "";
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloDiagnostico));
            crit.Add(Expression.Eq("IdProtocolo", this));
            IList lista = crit.List();
            if (lista.Count > 0)
            {
                foreach (ProtocoloDiagnostico oDiag in lista)
                {
                    Cie10 oD = new Cie10();
                    oD = (Cie10)oD.Get(typeof(Cie10), oDiag.IdDiagnostico);
                    
                    if (diag == "") diag = oD.Nombre;
                    else diag += " - " + oD.Nombre;

                    //if (oD.Codigo == "Z32.1") diag += " Embarazada";
                }
            }
            return diag;
        }

        public string getCodificaHiv(string embarazada)
        {
            string nombre = this.IdPaciente.Nombre;
            string apellido = this.IdPaciente.Apellido;
            if (nombre.Length >= 2) nombre = nombre.Substring(0, 2);
            else   nombre = nombre + " ";

            if (apellido.Length >= 2)  apellido = apellido.Substring(0, 2);
            else  apellido = apellido + " ";

            string codigo=this.Sexo +  nombre + apellido+  this.IdPaciente.FechaNacimiento.ToShortDateString().Replace("/", "") + embarazada;
            return codigo.ToUpper();

        }

        public void GeneraIncidenciaAutomatica(int idincidencia, int usr)
        {
            IncidenciaCalidad oInci = new IncidenciaCalidad();
            oInci = (IncidenciaCalidad)oInci.Get(typeof(IncidenciaCalidad), idincidencia);
         

            //// Verifica si la incidencia existe en el protocolo
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloIncidenciaCalidad));
            crit.Add(Expression.Eq("IdProtocolo", this.IdProtocolo));
            IList items = crit.List();
            foreach (ProtocoloIncidenciaCalidad oProtInci in items)
            {
                if (idincidencia == 46)
                {
                    if (oProtInci.IdIncidenciaCalidad == 47)
                        oProtInci.Delete();
                }
                if (idincidencia == 47)
                {
                    if (oProtInci.IdIncidenciaCalidad == 46)
                        oProtInci.Delete();
                }
            }

                  
                ProtocoloIncidenciaCalidad oDet = new ProtocoloIncidenciaCalidad();
                oDet.IdProtocolo = this.IdProtocolo;
                oDet.IdEfector = this.IdEfector.IdEfector;
                oDet.IdIncidenciaCalidad = idincidencia;
                oDet.Save();
                this.GrabarAuditoriaDetalleProtocolo("Registra", usr, "Incidencia", oInci.Nombre);
             

            

        }

        public void BorrarIncidenciasFISyFUC(int v)
        {
            
             

            //// Verifica si la incidencia existe en el protocolo
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloIncidenciaCalidad));
            crit.Add(Expression.Eq("IdProtocolo", this.IdProtocolo));
            IList items = crit.List();
            foreach (ProtocoloIncidenciaCalidad oProtInci in items)
            {
                
                    if (oProtInci.IdIncidenciaCalidad == 47)
                        oProtInci.Delete();
                
                    if (oProtInci.IdIncidenciaCalidad == 46)
                        oProtInci.Delete();
                 
            }

                
        }

        public void GuardarWhonet( bool guardar)
        {
            ProtocoloWhonet oRegistro = new ProtocoloWhonet();
            oRegistro = (ProtocoloWhonet)oRegistro.Get(typeof(ProtocoloWhonet), "IdProtocolo", this);
            if (guardar)
            {
                if (oRegistro == null)
                {
                    ProtocoloWhonet oRegistroNew = new ProtocoloWhonet();
                    oRegistroNew.IdProtocolo = this;
                    oRegistroNew.Save();
                }
            }
            else
            {
                if (oRegistro != null) oRegistro.Delete();
            }
        }




        public string getDatosParentesco()
        {
            string s_paciente = "";
            SolicitudScreening oSolicitud = new SolicitudScreening();
            oSolicitud = (SolicitudScreening)oSolicitud.Get(typeof(SolicitudScreening), "IdProtocolo", this);
            if (oSolicitud!=null)
                //s_paciente = oSolicitud.ApellidoMaterno.ToUpper() + " " + oSolicitud.ApellidoPaterno.ToUpper() + " " + this.IdPaciente.Nombre.ToUpper();
                s_paciente = oSolicitud.ApellidoPaterno.ToUpper() + " " + this.IdPaciente.Nombre.ToUpper();
            return s_paciente;
        }

        public int getIncidencias()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloIncidenciaCalidad));
            crit.Add(Expression.Eq("IdProtocolo", this.IdProtocolo));
            IList lista = crit.List();
           return lista.Count ;
            
         
        }


        public void ValidarTodoslosAtb(int item, int usuario, bool completo)
        {
           ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(Antibiograma));
            crit.Add(Expression.Eq("IdProtocolo", this));
            crit.Add(Expression.Eq("IdItem", item));


            IList lista = crit.List();
            foreach (Antibiograma oAtb in lista)
            {
                if (completo)
                {
                    oAtb.FechaValida = DateTime.Now;
                    oAtb.IdUsuarioValida = usuario;
                    if (oAtb.Valor != "") oAtb.ValidaValor = true;
                    oAtb.Save();
                    this.GrabarAuditoriaDetalleProtocolo("Valida", oAtb.IdUsuarioValida, "ATB " + oAtb.NumeroAislamiento.ToString() + " " + oAtb.IdGermen.Nombre + " (" + oAtb.IdMetodologia.ToString() + ") - " + oAtb.IdAntibiotico.Descripcion, oAtb.Resultado);
                }
                else
                {
                    if  (oAtb.IdUsuarioValida==0)
                    {
                        oAtb.FechaValida = DateTime.Now;
                        oAtb.IdUsuarioValida = usuario;
                        if (oAtb.Valor != "") oAtb.ValidaValor = true;
                        oAtb.Save();
                        this.GrabarAuditoriaDetalleProtocolo("Valida", oAtb.IdUsuarioValida, "ATB " + oAtb.NumeroAislamiento.ToString() + " " + oAtb.IdGermen.Nombre + " (" + oAtb.IdMetodologia.ToString() + ") - " + oAtb.IdAntibiotico.Descripcion, oAtb.Resultado);
                    }
                }
                
            }
            
        }
        public void GuardarAnexo(string fileName, string v1, string visi, Usuario oUser, int iddetalleprotocolo)
        {
            ProtocoloAnexo oRegistro = new ProtocoloAnexo();
            oRegistro.IdProtocolo = this;
            oRegistro.IdEfector = this.IdEfector;
            oRegistro.Url = fileName;
            oRegistro.Descripcion = v1;
            if (visi == "0") oRegistro.Visible = false; else oRegistro.Visible = true;
            oRegistro.IdDetalleProtocolo = iddetalleprotocolo;
            oRegistro.IdUsuarioRegistro = oUser;
            oRegistro.FechaRegistro = DateTime.Now;
          
            oRegistro.Save();
            if (!oRegistro.IdProtocolo.EnProceso())
            {
                oRegistro.IdProtocolo.Estado = 1; oRegistro.IdProtocolo.Save();
            }
            oRegistro.IdProtocolo.GrabarAuditoriaDetalleProtocolo("Adjunta archivo", oUser.IdUsuario, fileName, v1);
        }

        public IList buscarProtocolocargadoconFechaMayoralaActual()
        {
            ICriteria crit = m_session.CreateCriteria(typeof(Protocolo));
            ///1.busco todos los protocolos dados de baja
            crit.Add(Expression.Sql(" FechaRegistro >=getdate()"));

            IList lista = crit.List();
            return lista;
        }

        public string getQRResultados(Configuracion oCon)
        {
            GeneraCodigoQR oGenera = new GeneraCodigoQR();

            ////Add the Barcode column to the DataSet
            //Ds.Tables[0].Columns.Add(new DataColumn("CodigoQR", typeof(byte[])));
            //for (int i = 0; i < data.Rows.Count; i++)
            //{

                //int i_idProtocolo = int.Parse(data.Rows[i][0].ToString());
                //Protocolo oProtocolo = new Protocolo();

                //oProtocolo = (Protocolo)oProtocolo.Get(typeof(Protocolo), i_idProtocolo);


                Business.Utility oUtil = new Business.Utility();
                string s_idEfector = "0";
                if (this.IdEfector.IdEfector.ToString() == "228")
                    s_idEfector = "228";

                string param = oUtil.EncryptarNet(s_idEfector + "n" + this.IdProtocolo.ToString(), "SIL", 256);
                string s_url = oCon.UrlResultadosQR + "?de=" + param; /// definir cual es la url a la que llevará el QR: url de la base de datos o web.config + el numero de protocolo.
                ////qrcode.CodeToEncode = (int)dr["id_venta"] + "";
                byte[] imageData = oGenera.ConvertirQR(s_url);  /// definir cual es la url a la que llevará el QR
              //Convert byte arry to base64string
            string imreBase64Data = Convert.ToBase64String(imageData);
            string imgDataURL = string.Format("data:image/png;base64,{0}", imreBase64Data);
            return imgDataURL;
                ////OpcionBusqueda = dr["OpcionBusqueda"].ToString();
            }

       


     
    }
}
