/*
insert license info here
*/
using Business.Data.Facturacion;
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class CasoFiliacion : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

        private int m_idcasofiliacion;
        private Efector m_idefector;       
        private string m_nombre;
        private int m_idusuarioregistro;
        private DateTime m_fecharegistro;
        private bool m_baja;
        private string m_objetivo;
        private string m_muestra;
        private string m_resultado;
        private string m_conclusion;
        private string m_metodo;
        private string m_amplificacion;
        private string m_analisis;
        private string m_software;

        public bool Prefacturado()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria critMarcadores = m_session.CreateCriteria(typeof(DetallePresupuesto));
            critMarcadores.Add(Expression.Eq("IdCasoFiliacion", this.IdCasoFiliacion));
            critMarcadores.Add(Expression.Eq("Prefacturado",true));
            IList detalle = critMarcadores.List();
            if (detalle.Count > 0)
                return true;
            else
                return false;
              
        }

        private string m_estadistico;
        private string m_marcoestudio;
        private string m_solicitante;
        private string m_autos;
        private string m_bibliografia;
        private int m_idusuariocarga;
        private DateTime m_fechacarga;
        private int m_idusuariovalida;
        private DateTime m_fechavalida;
        private int m_idtipocaso; //1: filiacion, 2: forense
        private string m_cuantificacion;
        private string m_motivobaja;
        private string m_probabilidad;
        private string m_limitedeteccion;
        private DateTime m_fechatransplante;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public CasoFiliacion()
		{
        
			m_nombre = String.Empty;
            m_solicitante                 = String.Empty;
            m_autos = String.Empty;
            m_bibliografia = String.Empty;
            m_baja = false;
            m_idusuarioregistro = 0;
            m_fecharegistro = DateTime.MinValue;
            m_objetivo = String.Empty;
            m_muestra = String.Empty;
            m_resultado = String.Empty;
            m_conclusion = String.Empty;
            m_cuantificacion = String.Empty;
            m_metodo = String.Empty;
       m_amplificacion = String.Empty;
         m_analisis = String.Empty;
          m_software = String.Empty;
          m_estadistico = String.Empty;
         m_marcoestudio = String.Empty;
            m_idusuariocarga = 0;
            m_fechacarga= DateTime.MinValue;
            m_idusuariovalida = 0;
            m_fechavalida = DateTime.MinValue;
            m_idtipocaso = 0;
            m_motivobaja = String.Empty;
            m_probabilidad = String.Empty;
            m_limitedeteccion = String.Empty;
            m_fechatransplante  = DateTime.MinValue;
        }

      


        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public CasoFiliacion(
			string nombre, 
			bool baja,
             int idusuarioregistro,
            DateTime fecharegistro,
            string objetivo,
            string muestra,
                 string resultado,
                 string solicitante,
                 string autos,
            string conclusion,
            string metodo ,
       string amplificacion ,string cuantificacion,
       string bibliografia,
        string analisis ,
        string software ,
        string estadistico,
       string marcoestudio, int idusuariocarga,
            DateTime fechacarga,
        int idusuariovalida,
            DateTime fechavalida,
             int idtipocaso,
             string motivobaja,
             string probabilidad,
             string limitedeteccion,
             DateTime fechatransplante
             )
			: this()
		{
			m_nombre = nombre;
			m_baja = baja;
            m_idusuarioregistro = idusuarioregistro;
        m_fecharegistro = DateTime.MinValue;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdCasoFiliacion
		{
			get { return m_idcasofiliacion; }
			set
			{
				m_isChanged |= (m_idcasofiliacion != value );
                m_idcasofiliacion = value;
			}

		}

        public Efector IdEfector
        {
            get { return m_idefector; }
            set
            {
                m_isChanged |= (m_idefector != value);
                m_idefector = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}


        public string MotivoBaja
        {
            get { return m_motivobaja; }

            set
            {
                //if (value == null)
                //    throw new ArgumentOutOfRangeException("Null value not allowed for MotivoBaja", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for MotivoBaja", value, value.ToString());

                m_isChanged |= (m_motivobaja != value); m_motivobaja = value;
            }
        }

        public string Bibliografia
        {
            get { return m_bibliografia; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 5000)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_bibliografia != value); m_bibliografia = value;
            }
        }


        public string Probabilidad
        {
            get { return m_probabilidad; }
            set
            {
                m_isChanged |= (m_probabilidad != value);
                m_probabilidad = value;
            }
        }
        public string LimiteDeteccion
        {
            get { return m_limitedeteccion; }
            set
            {
                m_isChanged |= (m_limitedeteccion != value);
                m_limitedeteccion = value;
            }
        }

        public string Solicitante
        {
            get { return m_solicitante; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_solicitante != value); m_solicitante = value;
            }
        }

        public string Autos
        {
            get { return m_autos; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_autos != value); m_autos = value;
            }
        }

        public void GrabarAuditoria(string m_accion, int m_idusuario, string valor)
        {
            AuditoriaCasoFiliacion oRegistro = new AuditoriaCasoFiliacion();
            oRegistro.Accion = m_accion;
            oRegistro.Fecha = DateTime.Now;
            oRegistro.Hora = DateTime.Now.ToLongTimeString();
            oRegistro.IdCasoFiliacion = this.IdCasoFiliacion;
            oRegistro.Valor = valor;
            oRegistro.IdUsuario = m_idusuario;
            oRegistro.Save();
        }
        

        /// <summary>
        /// 
        /// </summary>
        public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}
        public int IdUsuarioRegistro
        {
            get { return m_idusuarioregistro; }
            set
            {
                m_isChanged |= (m_idusuarioregistro != value);
                m_idusuarioregistro = value;
            }

        }

        public int IdTipoCaso
        {
            get { return m_idtipocaso; }
            set
            {
                m_isChanged |= (m_idtipocaso != value);
                m_idtipocaso = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRegistro
        {
            get { return m_fecharegistro; }
            set
            {
                m_isChanged |= (m_fecharegistro != value);
                m_fecharegistro = value;
            }

        }

        public DateTime FechaTransplante
        {
            get { return m_fechatransplante; }
            set
            {
                m_isChanged |= (m_fechatransplante != value);
                m_fechatransplante = value;
            }

        }

        public int IdUsuarioValida
        {
            get { return m_idusuariovalida; }
            set
            {
                m_isChanged |= (m_idusuariovalida != value);
                m_idusuariovalida = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaValida
        {
            get { return m_fechavalida; }
            set
            {
                m_isChanged |= (m_fechavalida != value);
                m_fechavalida = value;
            }

        }
        public int IdUsuarioCarga
        {
            get { return m_idusuariocarga; }
            set
            {
                m_isChanged |= (m_idusuariocarga != value);
                m_idusuariocarga = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaCarga
        {
            get { return m_fechacarga; }
            set
            {
                m_isChanged |= (m_fechacarga != value);
                m_fechacarga = value;
            }

        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}


        public string Objetivo
        {
            get { return m_objetivo; }
            set
            {
                m_isChanged |= (m_objetivo != value);
                m_objetivo = value;
            }
        }

        public string Muestra
        {
            get { return m_muestra; }
            set
            {
                m_isChanged |= (m_muestra != value);
                m_muestra = value;
            }
        }


        public string Resultado
        {
            get { return m_resultado; }
            set
            {
                m_isChanged |= (m_resultado != value);
                m_resultado = value;
            }
        }

        public string Conclusion
        {
            get { return m_conclusion; }
            set
            {
                m_isChanged |= (m_conclusion != value);
                m_conclusion = value;
            }
        }


        public string Metodo
        {
            get { return m_metodo; }
            set
            {
                m_isChanged |= (m_metodo != value);
                m_metodo = value;
            }
        }

        public string Amplificacion
        {
            get { return m_amplificacion; }
            set
            {
                m_isChanged |= (m_amplificacion != value);
                m_amplificacion = value;
            }
        }
        public string Cuantificacion
        {
            get { return m_cuantificacion; }
            set
            {
                m_isChanged |= (m_cuantificacion != value);
                m_cuantificacion = value;
            }
        }

        public string Analisis
        {
            get { return m_analisis; }
            set
            {
                m_isChanged |= (m_analisis != value);
                m_analisis = value;
            }
        }


        public string Software
        {
            get { return m_software; }
            set
            {
                m_isChanged |= (m_software != value);
                m_software = value;
            }
        }

        public string Estadistico
        {
            get { return m_estadistico; }
            set
            {
                m_isChanged |= (m_estadistico != value);
                m_estadistico = value;
            }
        }

        public string Marcoestudio
        {
            get { return m_marcoestudio; }
            set
            {
                m_isChanged |= (m_marcoestudio != value);
                m_marcoestudio = value;
            }
        }

        public object getResultado(string tipo)
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            string busqueda = "";
            if (tipo=="Final" ) busqueda = " inner "; else busqueda = " left ";

            string m_strSQL = @"select  cf.idcasofiliacion as idProtocolo, CF.objetivo as prioridad, CF.muestra as tipomuestra, CF.resultado as resultadoCar, CF.conclusion as observaciones, 
Pac.apellido, Pac.nombre, case when Pac.idEstado=2 then 'HC' else 'DNI ' end + convert(varchar,Pac.numerodocumento) as  numerodocumento , P.numero as numero, 
Par.nombre + ' ' + CFP.observacionParentesco as observacionDetalle ,
CF.metodo as metodo, CF.amplificacion as origen, CF.analisis as area, CF.software as grupo, CF.estadistico as item,
CF.marcoestudio as valorreferencia, convert(varchar(10), P.fechatomamuestra,103) as fecha, S.nombre as sector,
case when U.firmavalidacion='' then U.apellido + ' '+ U.nombre else U.firmaValidacion end  + ' ' + convert(varchar(10), CF.fechavalida,103) as firmante, convert(varchar(10), CF.fechavalida,103) as fechaEntrega,
M.nombre as muestra, CF.solicitante as solicitante, CF.autos as sala, CF.bibliografia as descripcionProducto, CF.imgResultado as imagen,
CF.cuantificacion as cama , CF.probabilidad as unidad, 
 isnull(cast(Cf.imgresultado as varchar(max)),0)  as estitulo

from  Lab_casofiliacion as CF
inner join  lab_casofiliacionprotocolo CFP on CF.idcasofiliacion= CFP.idcasofiliacion
inner join lab_protocolo P on P.idprotocolo = CFP.idprotocolo
inner join sys_paciente Pac on Pac.idPaciente= P.idpaciente 
inner join lab_parentesco as Par on Par.idParentesco=CFP.idtipoParentesco
inner join sys_efector as S on S.idefector= P.idefectorSolicitante
" + busqueda+@" join sys_usuario as U on U.idusuario= CF.idusuariovalida
inner join lab_muestra as M on M.idmuestra= P.idMuestra 

where cf.idcasofiliacion=" + this.IdCasoFiliacion.ToString() +" order by P.idProtocolo";


            if (this.IdTipoCaso==3) // quimerismo
                m_strSQL = @"select  cf.idcasofiliacion as idProtocolo, CF.objetivo as prioridad, CF.muestra as tipomuestra, CF.resultado as resultadoCar, CF.conclusion as observaciones, 
Pac.apellido, Pac.nombre, case when Pac.idEstado=2 then 'HC' else 'DNI ' end + convert(varchar,Pac.numerodocumento) as  numerodocumento , P.numero as numero, 

Par.nombre + ' ' + CFP.observacionParentesco as observacionDetalle ,
CF.metodo as metodo, CF.amplificacion as origen, CF.analisis as area, CF.software as grupo,  CF.limiteDeteccion as item,
CF.marcoestudio as valorreferencia, convert(varchar(10), P.fechatomamuestra,103) as fecha, S.nombre as sector,
case when U.firmavalidacion='' then U.apellido + ' '+ U.nombre else U.firmaValidacion end  + ' ' + convert(varchar(10), CF.fechavalida,103) as firmante, convert(varchar(10), CF.fechavalida,103) as fechaEntrega,
M.nombre + ' ' + P.descripcionProducto as muestra, CF.solicitante as solicitante, 
case when CF.fechaTransplante='19000101' then '' else  convert(varchar(10),CF.fechaTransplante,103) end  as sala,
CF.imgResultado as imagen,
CF.cuantificacion as cama , CF.probabilidad as unidad, 
 isnull(cast(Cf.imgresultado as varchar(max)),0)  as estitulo,
CF.muestra as descripcionProducto
from  Lab_casofiliacion as CF
inner join  lab_casofiliacionprotocolo CFP on CF.idcasofiliacion= CFP.idcasofiliacion
inner join lab_protocolo P on P.idprotocolo = CFP.idprotocolo
inner join sys_paciente Pac on Pac.idPaciente= P.idpaciente 
inner join lab_parentesco as Par on Par.idParentesco=CFP.idtipoParentesco
inner join sys_efector as S on S.idefector= P.idefectorSolicitante
inner  join sys_usuario as U on U.idusuario= CF.idusuariovalida
inner join lab_muestra as M on M.idmuestra= P.idMuestra 

where cf.idcasofiliacion=" + this.IdCasoFiliacion.ToString() + " order by P.idProtocolo";


            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }

        public object getResultadoHLA(int idhoja)
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;


            string m_strSQL = @"select  cf.idcasofiliacion as idProtocolo,CF.nombre as prioridad, CF.muestra as tipomuestra, CF.resultado as resultadoCar, CF.conclusion as observaciones, 
Pac.apellido, Pac.nombre, case when Pac.idEstado=2 then 'HC ' else 'DNI ' end + convert(varchar,Pac.numerodocumento) as  numerodocumento , P.numero as numero, 
Par.nombre + ' ' + CFP.observacionParentesco as observacionDetalle ,
CF.metodo as metodo, CF.amplificacion as origen, CF.analisis as area, dht.idDetalleHojaTrabajo as grupo, I.descripcion as item,
CF.marcoestudio as valorreferencia, convert(varchar(10), P.fechatomamuestra,103) as fecha, S.nombre as sector,
case when U.firmavalidacion='' then U.apellido + ' '+ U.nombre else U.firmaValidacion end  + ' ' + convert(varchar(10), CF.fechavalida,103) as firmante, convert(varchar(10), CF.fechavalida,103) as fechaEntrega,
M.nombre as muestra, CF.solicitante as solicitante, CF.autos as sala, DP.resultadoCar as descripcionProducto,
CF.marcoestudio as valorReferencia
from  Lab_casofiliacion as CF
inner join  lab_casofiliacionprotocolo CFP on CF.idcasofiliacion= CFP.idcasofiliacion
inner join lab_protocolo P on P.idprotocolo = CFP.idprotocolo
INNER JOIN  dbo.LAB_DetalleProtocolo AS DP ON DP.idprotocolo = P.idProtocolo 
inner join LAB_DetalleHojaTrabajo as DHT on DHT.idItem= dp.idsubitem
	  inner join lab_item as I on I.iditem= dp.idsubitem
inner join sys_paciente Pac on Pac.idPaciente= P.idpaciente 
inner join lab_parentesco as Par on Par.idParentesco=CFP.idtipoParentesco
inner join sys_efector as S on S.idefector= P.idefectorSolicitante
inner join sys_usuario as U on U.idusuario= CF.idusuariovalida
inner join lab_muestra as M on M.idmuestra= P.idMuestra 
where cf.idcasofiliacion=" + this.IdCasoFiliacion.ToString() + " and dht.idHojaTrabajo="+ idhoja.ToString()+ " order by P.idprotocolo";

            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }

        public object getResultadoForense()
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;


            string m_strSQL = @"select  cf.idcasofiliacion as idProtocolo, CF.objetivo as prioridad, CF.muestra as tipomuestra, CF.resultado as resultadoCar, CF.conclusion as observaciones, 
Pac.apellido, Pac.nombre, 
P.numeroOrigen as  numerodocumento , P.numero as numero, 
 P.descripcionProducto as  observacionDetalle ,
CF.metodo as metodo, CF.amplificacion as origen, CF.analisis as area, CF.software as grupo, CF.estadistico as item,
CF.marcoestudio as valorreferencia, convert(varchar(10), P.fechatomamuestra,103) as fecha, S.nombre as sector,
case when U.firmavalidacion='' then U.apellido + ' '+ U.nombre else U.firmaValidacion end  + ' ' + convert(varchar(10), CF.fechavalida,103) as firmante, convert(varchar(10), CF.fechavalida,103) as fechaEntrega,
M.nombre as muestra, CF.solicitante as solicitante, CF.autos as sala, CF.bibliografia as descripcionProducto, CF.imgResultado as imagen,
CF.cuantificacion as cama,  isnull(cast(Cf.imgresultado as varchar(max)),0)  as estitulo
from  Lab_casofiliacion as CF
inner join  lab_casofiliacionprotocolo CFP on CF.idcasofiliacion= CFP.idcasofiliacion
inner join lab_protocolo P on P.idprotocolo = CFP.idprotocolo
inner join sys_paciente Pac on Pac.idPaciente= P.idpaciente 
inner join lab_parentesco as Par on Par.idParentesco=CFP.idtipoParentesco
inner join sys_efector as S on S.idefector= P.idefectorSolicitante
inner join sys_usuario as U on U.idusuario= CF.idusuariovalida
inner join lab_muestra as M on M.idmuestra= P.idMuestra 
where cf.idcasofiliacion=" + this.IdCasoFiliacion.ToString() + " order by P.idProtocolo";

            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }

        public object getTablaForense(string tipo, string subitem, string listaProtocolos)
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;

            string condicion = " 1= 1";
            if (subitem != "")
                condicion = " X.subitem like '%Y%' ";
            else
                condicion = " X.subitem not like '%Y%' ";

            string m_strSQL = @"select x.*, iddetalletipomarcador  as formatoDecimal 
  from 
  (
select idCasoFiliacion, dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as idProtocolo,subitem, marcador as grupo, allello1 as valor, 'Alelo 1' as formato0  from LAB_CasoMarcadores where idCasoFiliacion=" + this.IdCasoFiliacion.ToString() + @" and idProtocolo in ("+ listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello2 as valor, 'Alelo 2' as formato0  from LAB_CasoMarcadores where idCasoFiliacion=" + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion, dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo, subitem,marcador as grupo, allello3 as valor, 'Alelo 3' as formato0  from LAB_CasoMarcadores where idCasoFiliacion=" + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello4 as valor, 'Alelo 4' as formato0  from LAB_CasoMarcadores where idCasoFiliacion=" + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo, subitem,marcador as grupo, allello5 as valor, 'Alelo 5' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion, dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello6 as valor, 'Alelo 6' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello7 as valor, 'Alelo 7' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello8 as valor, 'Alelo 8' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion, dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello9 as valor, 'Alelo 9' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
union
select idCasoFiliacion,dbo.NumeroProtocolo( idProtocolo) +' ' + isnull(subitem,'') as  idProtocolo,subitem, marcador as grupo, allello10 as valor, 'Alelo 10' as formato0  from LAB_CasoMarcadores where idCasoFiliacion = " + this.IdCasoFiliacion.ToString() + @" and idProtocolo in (" + listaProtocolos + @")
)x 

inner join lab_detalletipomarcador as M on M.nombre= X.grupo

where " + condicion +@" and  m.idtipomarcador=" + tipo+ @" 
   
    order by m.iddetalletipomarcador";

            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }


        public object getMarcadores()
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;


            //            string m_strSQL = @" select   MM.idcasofiliacion,MM.formato0, MM.formato1, MM.formato2,
            //case mm.formato1  when 'AMEL' then 1 when 'D3S1358' then 2 when 'D1S1656' then 3 when 'D2S441' 
            //  then 4 when 'D10S1248' then 5 when 'D13S317' then 6 when 'PENTA E' then 7 when 'D16S539' then 8 when 'D18S51' then 9 
            //  when 'D2S1338' then 10 when 'CSF1PO' then 11 when 'PENTA D' then 12 when 'TH01' then 13 when 'VWA' then 14 when 'D21S11' 
            //  then 15 when 'D7S820' then 16 when 'D5S818' then 17 when 'TPOX' then 18 when 'DYS391' then 19 when 'D8S1179' then 20 
            //  when 'D12S391' then 21 when 'D19S433' then 22 when 'FGA' then 23 when 'D22S1045' then 24    when 'TOTAL' THEN 25 end as formatoDecimal 
            //from   LAB_Marcadores  as MM
            //where mm.idcasofiliacion=" + this.IdCasoFiliacion.ToString() + " order by formatoDecimal";


            string m_strSQL = @" select   MM.idcasofiliacion,MM.formato0, MM.formato1, MM.formato2,
case mm.formato1  when 'AMEL' then 1 when 'D3S1358' then 2 when 'D1S1656' then 3 when 'D2S441' 
  then 4 when 'D10S1248' then 5 when 'D13S317' then 6 when 'PENTA E' then 7 when 'D16S539' then 8 when 'D18S51' then 9 
  when 'D2S1338' then 10 when 'CSF1PO' then 11 when 'PENTA D' then 12 when 'TH01' then 13 when 'VWA' then 14 when 'D21S11' 
  then 15 when 'D7S820' then 16 when 'D5S818' then 17 when 'TPOX' then 18 when 'DYS391' then 19 when 'D8S1179' then 20 
  when 'D12S391' then 21 when 'D19S433' then 22 when 'FGA' then 23 when 'D22S1045' then 24    when 'TOTAL' THEN 25 end as formatoDecimal 
from   LAB_Marcadores  as MM
where mm.idcasofiliacion=" + this.IdCasoFiliacion.ToString() + " order by formatoDecimal";
            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }

        public bool tieneMarcadorIP()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria critMarcadores = m_session.CreateCriteria(typeof(CasoMarcadores));
            critMarcadores.Add(Expression.Eq("IdCasoFiliacion", this.IdCasoFiliacion));
            critMarcadores.Add(Expression.Eq("IdProtocolo", 0));            
            IList detalleMarcadores = critMarcadores.List();
            if (detalleMarcadores.Count > 0) return true;
            else return false;
        }
       
        public void ImportarMuestras(CasoFiliacion oRegistroOriginal, int i_idusuario)
        {
            ///Eliminar los detalles para volverlos a crear            
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(CasoFiliacionProtocolo));
            crit.Add(Expression.Eq("IdCasoFiliacion", oRegistroOriginal));
            IList detalle = crit.List();
            if (detalle.Count > 0)

            {
                foreach (CasoFiliacionProtocolo oDetalle in detalle)
                {
                    if (!oDetalle.estaEnCaso(this))
                    {
                        CasoFiliacionProtocolo oDetalleNuevo = new CasoFiliacionProtocolo();
                        Protocolo oItem = new Protocolo();
                        oDetalleNuevo.IdCasoFiliacion = this;
                        oDetalleNuevo.IdTipoParentesco = oDetalle.IdTipoParentesco;
                        oDetalleNuevo.IdProtocolo = oDetalle.IdProtocolo;

                        oDetalleNuevo.Save();

                        oDetalleNuevo.IdProtocolo.GrabarAuditoriaProtocolo("Vinculado a caso " + oDetalleNuevo.IdCasoFiliacion.IdCasoFiliacion.ToString(), i_idusuario);
                    }
                }
            }
        }

        public string getFactura()
        {
            string n = "";
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria critMarcadores = m_session.CreateCriteria(typeof(Factura));
            critMarcadores.Add(Expression.Eq("IdCasoFiliacion", this.IdCasoFiliacion));
          

            IList detalle = critMarcadores.List();
            if (detalle.Count > 0)

            {
                foreach (Factura oDetalle in detalle)
                {if (oDetalle.Baja == false)
                    { n = oDetalle.Numero; break; }
                }
            }
            return n;
        }

        public bool tienePresupuesto()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria critMarcadores = m_session.CreateCriteria(typeof(CasoPresupuesto));
            critMarcadores.Add(Expression.Eq("IdCasoFiliacion", this));
         
            IList detalle = critMarcadores.List();
            if (detalle.Count > 0)
                return true;
            else
                return false;
        }
        #endregion
    }
}
