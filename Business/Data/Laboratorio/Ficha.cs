/*
insert license info here
*/
using Business.Data.Facturacion;
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Ficha : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

        private int m_idFichaRecepcion;
        private Efector m_idefector;       
        private string m_idFicha;
        private string m_tipoFicha;
        private string m_solicitante;
        private Efector m_idEfectorSolicitante;
        private string m_identificadorlabo;
        private string m_clasificacion;
        private string m_idCasoSnvs;

        private DateTime m_fecha ;
        private DateTime m_fechasintoma;
        private int m_idusuarioregistro;
        private DateTime m_fecharegistro;
        private string m_analisis;
        private int m_idTipoMuestra;


        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Ficha()
		{

            m_idFicha = String.Empty;
            m_analisis = String.Empty;
            m_solicitante                 = String.Empty;
            m_tipoFicha = String.Empty;
            m_identificadorlabo = String.Empty;
            m_fechasintoma = DateTime.MinValue;
            m_idusuarioregistro = 0;
            m_fecharegistro = DateTime.MinValue;
            m_clasificacion = String.Empty;
            m_idCasoSnvs = String.Empty;
            m_fecha = DateTime.MinValue;
            m_idTipoMuestra = 0;
        }

      


        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public Ficha(
             
         
        string idFicha,
         string tipoFicha,
         string solicitante,
      string  analisis,
         string identificadorlabo,
         string clasificacion,
        int idusuarioregistro,
            DateTime fecharegistro,
            DateTime    fecha,
            DateTime fechasintoma,
            int idTipoMuestra,
            string idCasoSnvs
             )
			: this()
		{
			m_idFicha = idFicha;
            m_tipoFicha = tipoFicha;
            m_idusuarioregistro = idusuarioregistro;
        m_fecharegistro = DateTime.MinValue;
            m_fecha = DateTime.MinValue;
            m_fechasintoma = DateTime.MinValue;
            m_analisis = analisis;
            m_idCasoSnvs = idCasoSnvs;
            m_idTipoMuestra = idTipoMuestra;

        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdFichaRecepcion
        {
			get { return m_idFichaRecepcion; }
			set
			{
				m_isChanged |= (m_idFichaRecepcion != value );
                m_idFichaRecepcion = value;
			}

		}

        public int IdTipoMuestra
        {
            get { return m_idTipoMuestra; }
            set
            {
                m_isChanged |= (m_idTipoMuestra != value);
                m_idTipoMuestra = value;
            }

        }


        public Efector IdEfector
        {
            get { return m_idefector; }
            set
            {
                m_isChanged |= (m_idefector != value);
                m_idefector = value;
            }

        }

        public Efector IdEfectorSolicitante
        {
            get { return m_idEfectorSolicitante; }
            set
            {
                m_isChanged |= (m_idEfectorSolicitante != value);
                m_idEfectorSolicitante = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public string IdFicha
        {
			get { return m_idFicha; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for m_idFicha", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for m_idFicha", value, value.ToString());
				
				m_isChanged |= (m_idFicha != value); m_idFicha = value;
			}
		}


        public string TipoFicha
        {
            get { return m_tipoFicha; }

            set
            {
                //if (value == null)
                //    throw new ArgumentOutOfRangeException("Null value not allowed for MotivoBaja", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_tipoFicha", value, value.ToString());

                m_isChanged |= (m_tipoFicha != value); m_tipoFicha = value;
            }
        }

        public string Analisis
        {
            get { return m_analisis; }

            set
            {
                //if (value == null)
                //    throw new ArgumentOutOfRangeException("Null value not allowed for MotivoBaja", value, "null");

                if (value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for m_analisis", value, value.ToString());

                m_isChanged |= (m_analisis != value); m_analisis = value;
            }
        }

        public string Solicitante
        {
            get { return m_solicitante; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_solicitante", value, "null");

                if (value.Length > 5000)
                    throw new ArgumentOutOfRangeException("Invalid value for m_solicitante", value, value.ToString());

                m_isChanged |= (m_solicitante != value); m_solicitante = value;
            }
        }


        public string Identificadorlabo
        {
            get { return m_identificadorlabo; }
            set
            {
                m_isChanged |= (m_identificadorlabo != value);
                m_identificadorlabo = value;
            }
        }

        public string IdCasoSnvs
        {
            get { return m_idCasoSnvs; }
            set
            {
                m_isChanged |= (m_idCasoSnvs != value);
                m_idCasoSnvs = value;
            }
        }
        public string Clasificacion
        {
            get { return m_clasificacion; }
            set
            {
                m_isChanged |= (m_clasificacion != value);
                m_clasificacion = value;
            }
        }
         
        public int IdUsuarioRegistro
        {
            get { return m_idusuarioregistro; }
            set
            {
                m_isChanged |= (m_idusuarioregistro != value);
                m_idusuarioregistro = value;
            }

        }
         

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRegistro
        {
            get { return m_fecharegistro; }
            set
            {
                m_isChanged |= (m_fecharegistro != value);
                m_fecharegistro = value;
            }

        }

        public DateTime FechaSintoma
        {
            get { return m_fechasintoma; }
            set
            {
                m_isChanged |= (m_fechasintoma != value);
                m_fechasintoma = value;
            }

        }

        public DateTime Fecha 
        {
            get { return m_fecha; }
            set
            {
                m_isChanged |= (m_fecha != value);
                m_fecha = value;
            }

        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}


      
        

       


      

     
       
        

        
        #endregion
    }
}
#endregion
