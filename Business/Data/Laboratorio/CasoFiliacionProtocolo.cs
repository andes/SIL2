/*
insert license info here
*/
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class CasoFiliacionProtocolo : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idcasofiliacionprotocolo; 
		private Protocolo m_idprotocolo; 
		private CasoFiliacion m_idcasofiliacion;
        private int m_idtipoparentesco;
        private string m_observacionparentesco;
        
    
        
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public CasoFiliacionProtocolo()
		{
            m_idcasofiliacionprotocolo = 0; 
			m_idprotocolo = new Protocolo();
            m_idcasofiliacion = new CasoFiliacion();
            m_idtipoparentesco = 0;
            m_observacionparentesco = String.Empty;
           
        

           
        }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public CasoFiliacionProtocolo(
			Protocolo idprotocolo,
            CasoFiliacion idcasofiliacion, 
			string observacionparentesco,
            int idtipoparentesco)
			: this()
		{
			m_idprotocolo = idprotocolo;
			m_idcasofiliacion = idcasofiliacion;


            m_idtipoparentesco = idtipoparentesco;
            m_observacionparentesco = observacionparentesco;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdCasoFiliacionProtocolo
		{
			get { return m_idcasofiliacionprotocolo; }
			set
			{
				m_isChanged |= (m_idcasofiliacionprotocolo != value );
                m_idcasofiliacionprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Protocolo IdProtocolo
		{
			get { return m_idprotocolo; }
			set
			{
				m_isChanged |= ( m_idprotocolo != value ); 
				m_idprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public CasoFiliacion IdCasoFiliacion
        {
			get { return m_idcasofiliacion; }
			set
			{
				m_isChanged |= (m_idcasofiliacion != value );
                m_idcasofiliacion = value;
			}

		}


        public string ObservacionParentesco
        {
            get { return m_observacionparentesco; }
            set
            {
                m_isChanged |= (m_observacionparentesco != value);
                m_observacionparentesco = value;
            }
        }


        /// <summary>
        /// 



        public int IdTipoParentesco
        {
            get { return m_idtipoparentesco; }
            set
            {
                m_isChanged |= (m_idtipoparentesco != value);
                m_idtipoparentesco = value;
            }

        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}

        public bool estaEnCaso(CasoFiliacion casoFiliacion)
        {
           
            ///Eliminar los detalles para volverlos a crear            
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(CasoFiliacionProtocolo));
            crit.Add(Expression.Eq("IdCasoFiliacion", casoFiliacion));
            crit.Add(Expression.Eq("IdProtocolo", this.IdProtocolo));
            IList detalle = crit.List();
            if (detalle.Count > 0)

                return true;
            else
                return false;
        }

        #endregion
    }
}
