/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class ProtocoloAnexo : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idprotocoloanexo; 
		private Protocolo m_idprotocolo; 
		private Efector m_idefector; 
		private string m_url;
        private string m_descripcion;
        private bool m_visible;
        private Usuario m_idusuarioregistro;
        private DateTime m_fecharegistro;
        private int m_iddetalleprotocolo;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ProtocoloAnexo()
		{
			m_idprotocoloanexo = 0; 
			m_idprotocolo = new Protocolo(); 
			m_idefector = new Efector(); 
			m_visible = false; 
            m_url= String.Empty;
            m_descripcion= String.Empty;
            m_idusuarioregistro = new Usuario();
            m_fecharegistro = DateTime.MinValue;
            m_iddetalleprotocolo = 0;
        }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ProtocoloAnexo(
			Protocolo idprotocolo, 
			Efector idefector, 
			bool visible,
            string descripcion,
            string url,
            int iddetalleprotocolo)
			: this()
		{
			m_idprotocolo = idprotocolo;
			m_idefector = idefector;
			
            m_descripcion = descripcion;
            m_url = url;
            m_visible = visible;
            m_iddetalleprotocolo = iddetalleprotocolo;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProtocoloAnexo
		{
			get { return m_idprotocoloanexo; }
			set
			{
				m_isChanged |= (m_idprotocoloanexo != value );
                m_idprotocoloanexo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Protocolo IdProtocolo
		{
			get { return m_idprotocolo; }
			set
			{
				m_isChanged |= ( m_idprotocolo != value ); 
				m_idprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}

        /// <summary>
        /// 
        /// </summary>
        public string Descripcion
        {
            get { return m_descripcion; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_descripcion", value, value.ToString());

                m_isChanged |= (m_descripcion != value); m_descripcion = value;
            }
        }

        public string Url
        {
            get { return m_url; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_url", value, value.ToString());

                m_isChanged |= (m_url != value); m_url = value;
            }
        }

        public bool Visible
        {
            get { return m_visible; }
            set
            {
                m_isChanged |= (m_visible != value);
                m_visible = value;
            }

        }
        public Usuario IdUsuarioRegistro
        {
            get { return m_idusuarioregistro; }
            set
            {
                m_isChanged |= (m_idusuarioregistro != value);
                m_idusuarioregistro = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRegistro
        {
            get { return m_fecharegistro; }
            set
            {
                m_isChanged |= (m_fecharegistro != value);
                m_fecharegistro = value;
            }

        }

        public int IdDetalleProtocolo
        {
            get { return m_iddetalleprotocolo; }
            set
            {
                m_isChanged |= (m_iddetalleprotocolo != value);
                m_iddetalleprotocolo = value;
            }

        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
