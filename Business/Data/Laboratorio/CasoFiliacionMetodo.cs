/*
insert license info here
*/
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class CasoFiliacionMetodo : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idcasofiliacionmetodo; 
	 
		private CasoFiliacion m_idcasofiliacion;
        private int m_idmetodoforense; 
        
    
        
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public CasoFiliacionMetodo()
		{
            m_idcasofiliacionmetodo = 0; 
		 
            m_idcasofiliacion = new CasoFiliacion();
            m_idmetodoforense = 0;
        }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public CasoFiliacionMetodo(
			Protocolo idprotocolo,
            CasoFiliacion idcasofiliacion, 
			 
            int idmetodoforense)
			: this()
		{
		 
			m_idcasofiliacion = idcasofiliacion;


            m_idmetodoforense = idmetodoforense;
            
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdCasoFiliacionMetodo
		{
			get { return m_idcasofiliacionmetodo; }
			set
			{
				m_isChanged |= (m_idcasofiliacionmetodo != value );
                m_idcasofiliacionmetodo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
	 
		/// <summary>
		/// 
		/// </summary>
		public CasoFiliacion IdCasoFiliacion
        {
			get { return m_idcasofiliacion; }
			set
			{
				m_isChanged |= (m_idcasofiliacion != value );
                m_idcasofiliacion = value;
			}

		}


      


        /// <summary>
        /// 



        public int IdMetodoForense
        {
            get { return m_idmetodoforense; }
            set
            {
                m_isChanged |= (m_idmetodoforense != value);
                m_idmetodoforense = value;
            }

        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}

 

        #endregion
    }
}
