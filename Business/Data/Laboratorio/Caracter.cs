/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Caracter : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idcaracter; 
		 
		private string m_nombre; 
		 
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Caracter()
		{
			m_idcaracter = 0; 
			 
			m_nombre = String.Empty; 
			 
		}
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public Caracter(

            string nombre
             )
            : this()
        {

            m_nombre = nombre;
        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdCaracter
        {
			get { return m_idcaracter; }
			set
			{
				m_isChanged |= (m_idcaracter != value );
                m_idcaracter = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
	 
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		 
	 
	 
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
