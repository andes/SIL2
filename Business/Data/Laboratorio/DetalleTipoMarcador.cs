/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DetalleTipoMarcador : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_iddetalletipomarcador; 
		private TipoMarcador m_idtipomarcador; 
	 
		private string m_nombre;
        //private int m_ancho;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DetalleTipoMarcador()
		{
			m_iddetalletipomarcador = 0; 
			m_idtipomarcador = new TipoMarcador(); 
		 
			m_nombre = String.Empty;
            //m_ancho = 0;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public DetalleTipoMarcador(
			TipoMarcador idtipomarcador, 
		 
			string nombre)
			: this()
		{
			m_idtipomarcador = idtipomarcador;

            m_nombre = nombre;
            //m_ancho = ancho;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdDetalleTipoMarcador
        {
			get { return m_iddetalletipomarcador; }
			set
			{
				m_isChanged |= (m_iddetalletipomarcador != value );
                m_iddetalletipomarcador = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public TipoMarcador IdTipoMarcador
		{
			get { return m_idtipomarcador; }
			set
			{
				m_isChanged |= (m_idtipomarcador != value );
                m_idtipomarcador = value;
			}

		}
			
		 
		 
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TextoImprimir", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for TextoImprimir", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}


        //public int Ancho
        //{
        //    get { return m_ancho; }
        //    set
        //    {
        //        m_isChanged |= (m_ancho != value);
        //        m_ancho = value;
        //    }

        //}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
