/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;
using System.Data;
using System.Data.SqlClient;
using NHibernate;
using NHibernate.Expression;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class TipoMarcador : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idtipomarcador; 
		 
        private string m_nombre;
 
        private bool m_baja;
        

        private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public TipoMarcador()
		{
			m_idtipomarcador = 0; 
			 
            m_nombre = String.Empty;
              
            m_baja = false;
         
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public TipoMarcador(
		 
            string nombre,
			Usuario idusuarioregistro, 
			DateTime fecharegistro,
            
            bool baja)
			: this()
		{
		 
            m_nombre = nombre;
         
            m_baja = baja;
           
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdTipoMarcador
        {
			get { return m_idtipomarcador; }
			set
			{
				m_isChanged |= (m_idtipomarcador != value );
                m_idtipomarcador = value;
			}

		}
         
			
		 

        public string Nombre
        {
            get { return m_nombre; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Formula", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Formula", value, value.ToString());

                m_isChanged |= (m_nombre != value); m_nombre = value;
            }
        }
  
 
  

 


        /// <summary>
        /// 
        /// </summary>
        public bool Baja
        {
            get { return m_baja; }
            set
            {
                m_isChanged |= (m_baja != value);
                m_baja = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}

        public int getOrden(string marcador)
        {  
            int orden = 0;
            
             DetalleTipoMarcador oCasoPro = new DetalleTipoMarcador();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(DetalleTipoMarcador));


            crit.Add(Expression.Eq("IdTipoMarcador", this));
            crit.Add(Expression.Eq("Nombre", marcador));

            IList detalle = crit.List();
            if (detalle.Count != 0)
                foreach (DetalleTipoMarcador oDetalle in detalle)
                {
                    orden = oDetalle.IdDetalleTipoMarcador;
                }

            return orden;

        
    }

        #endregion



    }
}
