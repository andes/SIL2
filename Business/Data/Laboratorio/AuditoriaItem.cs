/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class AuditoriaItem: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

        private int m_idauditoriaItem; 
		private int m_idItem; 
		private DateTime m_fecha; 
		private string m_hora; 
		private string m_accion; 
		private string m_analisis; 
		private string m_valor; 
		private string m_valoranterior; 
		private int m_idusuario;
        private string m_apellidoUsuario;
        private string m_nombreUsuario;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public AuditoriaItem()
		{
            m_idauditoriaItem = 0; 
			m_idItem = 0; 
			m_fecha = DateTime.MinValue; 
			m_hora = String.Empty; 
			m_accion = String.Empty; 
			m_analisis = String.Empty; 
			m_valor = String.Empty; 
			m_valoranterior = String.Empty; 
			m_idusuario = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public AuditoriaItem(
			int idItem, 
			DateTime fecha, 
			string hora, 
			string accion, 
			string analisis, 
			string valor, 
			string valoranterior, 
			int idusuario)
			: this()
		{
			m_idItem = idItem;
			m_fecha = fecha;
			m_hora = hora;
			m_accion = accion;
			m_analisis = analisis;
			m_valor = valor;
			m_valoranterior = valoranterior;
			m_idusuario = idusuario;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
        public int IdAuditoriaItem
		{
            get { return m_idauditoriaItem; }
			set
			{
                m_isChanged |= (m_idauditoriaItem != value);
                m_idauditoriaItem = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdItem
		{
			get { return m_idItem; }
			set
			{
				m_isChanged |= ( m_idItem != value ); 
				m_idItem = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime Fecha
		{
			get { return m_fecha; }
			set
			{
				m_isChanged |= ( m_fecha != value ); 
				m_fecha = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Hora
		{
			get { return m_hora; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Hora", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Hora", value, value.ToString());
				
				m_isChanged |= (m_hora != value); m_hora = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Accion
		{
			get { return m_accion; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Accion", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Accion", value, value.ToString());
				
				m_isChanged |= (m_accion != value); m_accion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Analisis
		{
			get { return m_analisis; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Analisis", value, "null");
				
				if(  value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Analisis", value, value.ToString());
				
				m_isChanged |= (m_analisis != value); m_analisis = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Valor
		{
			get { return m_valor; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Valor", value, "null");
				
				if(  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Valor", value, value.ToString());
				
				m_isChanged |= (m_valor != value); m_valor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ValorAnterior
		{
			get { return m_valoranterior; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for ValorAnterior", value, "null");
				
				if(  value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ValorAnterior", value, value.ToString());
				
				m_isChanged |= (m_valoranterior != value); m_valoranterior = value;
			}
		}

        public string ApellidoUsuario
        {
            get { return m_apellidoUsuario; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_apellidoUsuario", value, "null");

                if (value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for m_apellidoUsuario", value, value.ToString());

                m_isChanged |= (m_apellidoUsuario != value); m_apellidoUsuario = value;
            }
        }

        public string NombreUsuario
        {
            get { return m_nombreUsuario; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_nombreUsuario", value, "null");

                if (value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for m_nombreUsuario", value, value.ToString());

                m_isChanged |= (m_nombreUsuario != value); m_nombreUsuario = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
