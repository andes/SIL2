/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class EfectorRel : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idEfectorRelacionado; 
		private Efector m_idefector; 
		private Efector m_idEfectorRel;  
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public EfectorRel()
		{ 
            m_idefector = new Efector();
            m_idEfectorRel = new Efector(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public EfectorRel(
			Efector idefector, 
			Efector idEfectorRel )
			: this()
		{
			m_idefector = idefector;
			m_idEfectorRel = idEfectorRel; 
		}
        #endregion // End Required Fields Only Constructor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>
        public int IdEfectorRelacionado
        {
            get { return m_idEfectorRelacionado; }
            set
            {
                m_isChanged |= (m_idEfectorRelacionado != value);
                m_idEfectorRelacionado = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}

        public Efector IdEfectorRel
        {
            get { return m_idEfectorRel; }
            set
            {
                m_isChanged |= (m_idEfectorRel != value);
                m_idEfectorRel = value;
            }

        }
       
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
