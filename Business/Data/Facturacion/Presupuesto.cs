/*
insert license info here
*/
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Facturacion
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Presupuesto : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

        private int m_idpresupuesto;
        private int m_idservicio;
        private DateTime m_fecha;
        private string m_nombre;
        private string m_encabezado1;
        private string m_encabezado2;
        private string m_pie;
        private int m_idusuarioregistro;
        private DateTime m_fecharegistro;
        private bool m_baja;
        
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Presupuesto()
		{
            m_idservicio = 0;
            m_fecha  = DateTime.MinValue;
            m_encabezado1 = String.Empty;
            m_encabezado2 = String.Empty;
            m_pie = String.Empty;
            m_nombre = String.Empty;

            m_baja = false;
            m_idusuarioregistro = 0;
            m_fecharegistro = DateTime.MinValue;
          
        }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Presupuesto(
             int idServicio,
                DateTime fecha ,
            string encabezado1,
            string encabezado2,
            string pie,
            string nombre,
            bool baja,
             int idusuarioregistro,
            DateTime fecharegistro
            
             )
			: this()
		{
			m_encabezado1 = encabezado1;
            m_encabezado2 = encabezado2;
            m_pie = pie;
            m_baja = baja;
            m_nombre = nombre;
            m_idusuarioregistro = idusuarioregistro;
        m_fecharegistro = DateTime.MinValue;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPresupuesto
        {
			get { return m_idpresupuesto; }
			set
			{
				m_isChanged |= (m_idpresupuesto != value );
                m_idpresupuesto = value;
			}

		}
        public int IdServicio
        {
            get { return m_idservicio; }
            set
            {
                m_isChanged |= (m_idservicio != value);
                m_idservicio = value;
            }

        }
        public string Nombre
        {
            get { return m_nombre; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_nombre != value); m_nombre = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string Encabezado1
		{
			get { return m_encabezado1; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length >1000)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_encabezado1 != value); m_encabezado1 = value;
			}
		}

        public string Encabezado2
        {
            get { return m_encabezado2; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_encabezado2 != value); m_encabezado2 = value;
            }
        }

        public string Pie
        {
            get { return m_pie; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 1000)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_pie != value); m_pie = value;
            }
        }

     
        /// <summary>
        /// 
        /// </summary>
        public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}
        public int IdUsuarioRegistro
        {
            get { return m_idusuarioregistro; }
            set
            {
                m_isChanged |= (m_idusuarioregistro != value);
                m_idusuarioregistro = value;
            }

        }

        public DateTime Fecha 
        {
            get { return m_fecha; }
            set
            {
                m_isChanged |= (m_fecha != value);
                m_fecha = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRegistro
        {
            get { return m_fecharegistro; }
            set
            {
                m_isChanged |= (m_fecharegistro != value);
                m_fecharegistro = value;
            }

        }
 
        public bool IsChanged
		{
			get { return m_isChanged; }
		}


       

        public object getInforme( )
        {
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
          

            string m_strSQL = @"select convert(varchar(10),fecha, 103) as fechaEntrega,  encabezado1 as area, encabezado2 as observaciones, pie as observacionDetalle, 

descripcion as resultadoCar,cantidad as resultadonum, precio as formatodecimal, total as valor
 from LAB_Presupuesto as P  INNER JOIN
LAB_dETALLEPRESUPUESTO as D on P.idpresupuesto= D.idpresupuesto
where P.idpresupuesto= " + this.IdPresupuesto.ToString();

             
            DataSet Ds = new DataSet();

            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);
            return Ds.Tables[0];
        }

      
     
        #endregion
    }
}
