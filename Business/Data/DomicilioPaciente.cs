/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;
using NHibernate;
using NHibernate.Expression;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DomicilioPaciente : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_iddomiciliopaciente; 
        //private IList m_SysHistoriaClinicaList; 
        //private IList m_SysParentescoList; 
		private Paciente m_idpaciente; 
		 
		private DateTime m_fechadomicilio; 		 
		private string m_calle; 
		private string m_numero;    

        private string m_departamento; 
		private string m_manzana;
        private string m_cpostal;
        private string m_barrio;
        private string m_monoblock;
        private string m_ciudad;
        private string m_municipio;
        private string m_provincia;
        private string m_pais;
        private int m_idusuario; 
		private DateTime m_fechaalta; 
	 

		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DomicilioPaciente()
		{
			m_iddomiciliopaciente = 0; 			
			m_idpaciente = new Paciente();
            m_fechadomicilio = DateTime.MinValue; 			 
			m_calle = String.Empty; 
			m_numero = String.Empty;            
			m_departamento = String.Empty; 
	 
            m_cpostal = String.Empty;
            m_barrio = String.Empty;
            m_monoblock = String.Empty;
            m_ciudad = String.Empty;
            m_municipio = String.Empty;
            m_provincia = String.Empty;
            m_pais = String.Empty; 			 
			m_idusuario = 0; 
			m_fechaalta = DateTime.MinValue; 
			 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public DomicilioPaciente(
			Paciente idpaciente, 			 
			DateTime fechadomicilio, 			 
			string calle,
            string numero, 			
			string departamento, 
			string manzana,             
            string cpostal,
            string barrio,
            string monoblock,
            string ciudad,
            string municipio,
            string provincia,        
            string pais, 
			DateTime fechaalta  
			 )
			: this()
		{
            m_idpaciente = idpaciente;
            m_fechadomicilio = fechadomicilio;
            m_pais =  pais;
			m_provincia =  provincia;    //    
			m_calle = calle;
			m_numero = numero;
            m_cpostal = cpostal;
			m_departamento = departamento;
			m_manzana = manzana;
            //m_idlocalidad = IdLocalidad;
			m_barrio = barrio;
			
		
		
			m_fechaalta = fechaalta;
			
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPacienteDomicilio
        {
			get { return m_iddomiciliopaciente; }
			set
			{
				m_isChanged |= (m_iddomiciliopaciente != value );
                m_iddomiciliopaciente = value;
			}

		}

 
		public Paciente IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= (m_idpaciente != value );
                m_idpaciente = value;
			}

		}
			
	 
		public DateTime FechaDomicilio
		{
			get { return m_fechadomicilio; }
			set
			{
				m_isChanged |= (m_fechadomicilio != value );
                m_fechadomicilio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public string Pais
		{
			get { return m_pais; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdPais", value, "null");

				m_isChanged |= ( m_pais != value ); 
				m_pais = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public string Provincia
		{
			get { return m_provincia; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvincia", value, "null");

				m_isChanged |= ( m_provincia != value ); 
				m_provincia = value;
			}

		}
			
	 
		 
		public string Calle
		{
			get { return m_calle; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Calle", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Calle", value, value.ToString());
				
				m_isChanged |= (m_calle != value); m_calle = value;
			}
		}

        public string Cpostal
        {
            get { return m_cpostal; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Calle", value, "null");

                if (value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Calle", value, value.ToString());

                m_isChanged |= (m_cpostal != value); m_cpostal = value;
            }
        }
        public string Municipio
        {
            get { return m_municipio; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Calle", value, "null");

                if (value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Calle", value, value.ToString());

                m_isChanged |= (m_municipio != value); m_municipio = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Numero
		{
			get { return m_numero; }
			set
			{
				m_isChanged |= ( m_numero != value ); 
				m_numero = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Monoblock
		{
			get { return m_monoblock; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Piso", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Piso", value, value.ToString());
				
				m_isChanged |= (m_monoblock != value); m_monoblock = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Departamento
		{
			get { return m_departamento; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Departamento", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Departamento", value, value.ToString());
				
				m_isChanged |= (m_departamento != value); m_departamento = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		 
			
		/// <summary>
		/// 
		/// </summary>
        
			
		/// <summary>
		/// 
		/// </summary>
        public string Barrio
		{
			get { return m_barrio; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdBarrio", value, "null");

				m_isChanged |= (m_barrio != value );
                m_barrio = value;
			}

		}
			
		 
		/// <summary>
		/// 
		/// </summary>
        //public string Telefono1
        //{
        //    get { return m_telefono1; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono1", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono1", value, value.ToString());
				
        //        m_isChanged |= (m_telefono1 != value); m_telefono1 = value;
        //    }
        //}
			
        ///// <summary>
        ///// 
        ///// </summary>
        //public string Telefono2
        //{
        //    get { return m_telefono2; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono2", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono2", value, value.ToString());
				
        //        m_isChanged |= (m_telefono2 != value); m_telefono2 = value;
        //    }
        //}
			
		/// <summary>
		/// 
		/// </summary>
       
			
		 
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaAlta
		{
			get { return m_fechaalta; }
			set
			{
				m_isChanged |= ( m_fechaalta != value ); 
				m_fechaalta = value;
			}

		}

        public string Ciudad
        {
            get { return m_ciudad; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Departamento", value, "null");

                if (value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Departamento", value, value.ToString());

                m_isChanged |= (m_ciudad != value); m_ciudad = value;
            }
        }




        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

     
  
    }
}
