/*
insert license info here
*/
using Business.Data.Laboratorio;
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Usuario: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idusuario; 
		private Efector m_idefector;
        private Efector m_idefectordestino;
        private Perfil m_idperfil; 
		private string m_apellido; 
		private string m_nombre; 
		private string m_legajo; 
		private string m_username; 
		private string m_password; 
		private bool m_activo;
        private int m_idusuarioactualizacion;
        private DateTime m_fechaactualizacion;
        private string m_firmavalidacion;
        private int m_idarea;
        private bool m_requiereCambioPass;
        private bool m_administrador;
        private bool m_externo;
        private string m_email;
        private string m_telefono;
        private DateTime m_fechaTerminosCondiciones;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Usuario()
		{
			m_idusuario = 0; 
			m_idefector = new Efector();
            m_idefectordestino = new Efector();
            m_idperfil = new Perfil(); 
			m_apellido = String.Empty; 
			m_nombre = String.Empty; 
			m_legajo = String.Empty; 
			m_username = String.Empty; 
			m_password = String.Empty; 
			m_activo = false;
            m_idusuarioactualizacion = 0;
            m_fechaactualizacion= DateTime.MinValue;
            m_firmavalidacion = String.Empty;
            m_idarea = 0;
            m_requiereCambioPass = false;
            m_administrador = false;
			    m_externo = false;
            m_email= String.Empty;
            m_telefono = String.Empty;
            m_fechaTerminosCondiciones = new DateTime(1900,01,01);

        }

        
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public Usuario(
			bool activo)
			: this()
		{
			m_idefector = new Efector();
            m_idefectordestino = new Efector();
            m_idperfil = new Perfil();
			m_apellido = String.Empty;
			m_nombre = String.Empty;
			m_legajo = String.Empty;
			m_username = String.Empty;
			m_password = String.Empty;
			m_activo = activo;
            m_idusuarioactualizacion = 0;
            m_fechaactualizacion = DateTime.MinValue;
            m_idarea = 0;
            m_requiereCambioPass = false;
            m_administrador = false;
			 m_externo = false;
            m_fechaTerminosCondiciones = new DateTime(1900, 01, 01);
        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}


        public int IdArea
        {
            get { return m_idarea; }
            set
            {
                m_isChanged |= (m_idarea != value);
                m_idarea = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}

        public Efector IdEfectorDestino
        {
            get { return m_idefectordestino; }
            set
            {
                m_isChanged |= (m_idefectordestino != value);
                m_idefectordestino = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public Perfil IdPerfil
		{
			get { return m_idperfil; }
			set
			{
				m_isChanged |= ( m_idperfil != value ); 
				m_idperfil = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}

        public string Email
        {
            get { return m_email; }

            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for m_email", value, value.ToString());

                m_isChanged |= (m_email != value); m_email = value;
            }
        }

        public string Telefono
        {
            get { return m_telefono; }

            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_telefono", value, value.ToString());

                m_isChanged |= (m_telefono != value); m_telefono = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}

        public void GrabaAuditoria(string accion, int iduser, string username)
        {
            AuditoriaUsuario  oRegistro = new AuditoriaUsuario();
            oRegistro.IdUsuario = iduser; // usuario afectado que esta modificando, consultando , etc.
            oRegistro.Username = username;
            oRegistro.Accion = accion;
            oRegistro.Fecha = DateTime.Now;
            oRegistro.Hora = DateTime.Now.ToLongTimeString();

            oRegistro.IdUsuarioRegistro = this.IdUsuario; //usuario que realiza la accion
            oRegistro.Save();


        }

        public Usuario buscarUsuarioLocal(string username, string surname, string firstName, Efector oEfector)
        {
            Usuario oUser = new Usuario();
            oUser = (Usuario)oUser.Get(typeof(Usuario), "Username", username);
            if (oUser != null) return oUser;
            else
            {
                /// si el usuario no existe en sys_usuario lo genera
           

                Usuario oUserNew = new Usuario();
                oUserNew.IdEfector = oEfector;
                oUserNew.Username = username;
                oUserNew.Apellido = surname;
                oUserNew.Password = "";
                oUserNew.Nombre = firstName;
                oUserNew.IdPerfil = getPerfil("Externo");
                //oUserNew.IdUsuario = 2;
                oUserNew.Activo = true;
                oUserNew.IdUsuarioActualizacion = 2;
                oUserNew.FechaActualizacion = DateTime.Now;
                oUserNew.Save();
                return oUserNew;

            }
        }
        private Perfil getPerfil(string p)
        {
            Perfil oP = new Perfil();
            oP = (Perfil)oP.Get(typeof(Perfil), "Nombre",p);
            return oP;
        }
        /// <summary>
        /// 
        /// </summary>
        public string Legajo
		{
			get { return m_legajo; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Legajo", value, value.ToString());
				
				m_isChanged |= (m_legajo != value); m_legajo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Username
		{
			get { return m_username; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				m_isChanged |= (m_username != value); m_username = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Password
		{
			get { return m_password; }

			set	
			{	
				if(  value != null &&  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());
				
				m_isChanged |= (m_password != value); m_password = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Activo
		{
			get { return m_activo; }
			set
			{
				m_isChanged |= ( m_activo != value ); 
				m_activo = value;
			}

		}
        public bool Externo
        {
            get { return m_externo; }
            set
            {
                m_isChanged |= (m_externo != value);
                m_externo = value;
            }

        }

        public bool RequiereCambioPass
        {
            get { return m_requiereCambioPass; }
            set
            {
                m_isChanged |= (m_requiereCambioPass != value);
                m_requiereCambioPass = value;
            }

        }

        public bool Administrador
        {
            get { return m_administrador; }
            set
            {
                m_isChanged |= (m_administrador != value);
                m_administrador = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public int IdUsuarioActualizacion
        {
            get { return m_idusuario; }
            set
            {
                m_isChanged |= (m_idusuarioactualizacion != value);
                m_idusuarioactualizacion = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaActualizacion
        {
            get { return m_fechaactualizacion; }
            set
            {
                m_isChanged |= (m_fechaactualizacion != value);
                m_fechaactualizacion = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string FirmaValidacion
        {
            get { return m_firmavalidacion; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_firmavalidacion", value, value.ToString());

                m_isChanged |= (m_firmavalidacion != value); m_firmavalidacion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        //public string Matricula
        //{
        //    get { return m_matricula; }

        //    set
        //    {
        //        if (value != null && value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for m_matricula", value, value.ToString());

        //        m_isChanged |= (m_matricula != value); m_matricula = value;
        //    }
        //}
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}



        #endregion


        #region Metodos


        #endregion

        //public bool esHemoterapia()
        //{
        //     var index=this.IdPerfil.Nombre.ToUpper().IndexOf("HEMOTERAPIA");
        //     if (index > -1) return true;
        //     else return false;

        //}


        public DateTime FechaAceptaTerminosCondiciones {
            get { return m_fechaTerminosCondiciones; }
            set {
                m_isChanged |= (m_fechaTerminosCondiciones != value);
                m_fechaTerminosCondiciones = value;
            }

        }
    }
}
