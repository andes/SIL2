/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;
using NHibernate;
using NHibernate.Expression;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Paciente: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idpaciente; 
        //private IList m_SysHistoriaClinicaList; 
        //private IList m_SysParentescoList; 
		private Efector m_idefector; 
		private int m_historiaclinica; 
		private string m_apellido; 
		private string m_nombre; 
		//private int m_idtipodocumento; 
		private int m_numerodocumento; 
		private int m_idsexo;
        private int m_idsexolegal;
        private int m_idgenero;
        private string m_nombreautopercibido;
        private DateTime m_fechanacimiento; 
		private int m_idpais; 
		private int m_idprovincia; 
		private int m_idnivelinstruccion;
        private int m_idsituacionlaboral;
        private int m_idprofesion;
        private int m_idocupacion; 
		private string m_calle; 
		private int m_numero; 
		private string m_piso; 
		private string m_departamento; 
		private string m_manzana;
        private int m_idlocalidad;
        private int m_idbarrio;
        private int m_idprovinciadomicilio; 
		private string m_referencia; 
        //private string m_telefono1; 
        //private string m_telefono2;
        private int m_idobrasocial;
        private int m_idestadocivil; 
		private int m_idusuario; 
		private DateTime m_fechaalta; 
		private DateTime m_fechadefuncion; 
		private DateTime m_fechaultimaactualizacion;
        private int m_iddepartamento;
        private int m_idestado;
        private int m_idmotivoni;
        private string m_informacioncontacto;
        private string m_foto;
        private string m_numeroadic;
        private int m_idraza;
        private bool m_sedeclaraaborigen;
        private string m_mail;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Paciente()
		{
			m_idpaciente = 0; 			
			m_idefector = new Efector(); 
			m_historiaclinica = 0; 
			m_apellido = String.Empty; 
			m_nombre = String.Empty; 
		//	m_idtipodocumento = 0; 
			m_numerodocumento = 0; 
			m_idsexo = 0;
            m_idsexolegal = 0;
            m_fechanacimiento = DateTime.MinValue; 
			m_idpais = 0; 
			m_idprovincia = 0; 
			m_idnivelinstruccion = 0; 
			m_idsituacionlaboral = 0; 
			m_idprofesion = 0; 
			m_idocupacion = 0; 
			m_calle = String.Empty; 
			m_numero = 0; 
			m_piso = String.Empty; 
			m_departamento = String.Empty; 
			m_manzana = String.Empty; 
			m_idlocalidad = 0; 
			m_idbarrio = 0; 
			m_idprovinciadomicilio = 0; 
			m_referencia = String.Empty; 
            //m_telefono1 = String.Empty; 
            //m_telefono2 = String.Empty; 
			m_idobrasocial = 0;
            m_idestadocivil = 0; 
			m_idusuario = 0; 
			m_fechaalta = DateTime.MinValue; 
			m_fechadefuncion = DateTime.MinValue; 
			m_fechaultimaactualizacion = DateTime.MinValue; 
			m_iddepartamento = 0;
            m_idestado =0;
            m_idmotivoni = 0;
            m_informacioncontacto = String.Empty;
            m_foto = String.Empty;
            m_numeroadic = String.Empty;
               m_idgenero=0;
         m_nombreautopercibido = String.Empty;
            m_idraza = 0;
          m_sedeclaraaborigen = false;
          m_mail = String.Empty;
    }

        public string GetProtocolosReciente(int dias, string servicio)
        {
            string result = "";
            ICriteria critProtocolo = m_session.CreateCriteria(typeof(Protocolo));

            string ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio="+servicio+" and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                " and LAb_Protocolo.Fecha>='" + DateTime.Now.AddDays(-dias).ToString("yyyyMMdd") + "' order by LAb_Protocolo.IdProtocolo desc )";


            critProtocolo.Add(Expression.Sql(ssql_Protocolo));


            IList detalle = critProtocolo.List();

            if (detalle.Count > 0)
            {
                foreach (Protocolo oDetalle in detalle)
                {

                    result = oDetalle.Numero.ToString() + " - " + oDetalle.Fecha.ToShortDateString(); break;

                }
            }
            return result;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public Paciente(
			Efector idefector, 
			int historiaclinica, 
			string apellido, 
			string nombre, 
		//	int idtipodocumento, 
			int numerodocumento, 
			int idsexo, 
            int idsexolegal,
			DateTime fechanacimiento, 
			int idpais, 
			int idprovincia,
            int idnivelinstrucccion,
            int idsituacionlaboral,
            int idprofesion,
            int idocupacion, 
			string calle, 
			int numero, 
			string piso, 
			string departamento, 
			string manzana,
            int idbarrio,
            int idprovinciadomicilio, 
			string referencia, 
            //string telefono1, 
            //string telefono2,
            int idobrasocial,
            int idestadocivil, 
			int idusuario,
            int idestado,
            int idmotivoni,
            string informacioncontacto,
              string foto,
            DateTime fechaalta, 
			DateTime fechadefuncion, 
			DateTime fechaultimaactualizacion,
            string numeroadic,
              int   idgenero,
       string nombreautopercibido ,
       string mail,
       int idraza,
       bool sedeclaraaborigen)
			: this()
		{
			m_idefector = idefector;
			m_historiaclinica = historiaclinica;
			m_apellido = apellido;
			m_nombre = nombre;
		//	m_idtipodocumento = idtipodocumento;
			m_numerodocumento = numerodocumento;
			m_idsexo = idsexo;
            m_idsexolegal = idsexolegal;
			m_fechanacimiento = fechanacimiento;
			m_idpais = idpais;
			m_idprovincia = idprovincia;

    //        m_idestado = idestado;
            m_idmotivoni = idmotivoni;
            m_informacioncontacto = informacioncontacto;

			m_idnivelinstruccion = idnivelinstrucccion;
			m_idsituacionlaboral = idsituacionlaboral;
			m_idprofesion = idprofesion;
			m_idocupacion = idocupacion;
			m_calle = calle;
			m_numero = numero;
			m_piso = piso;
			m_departamento = departamento;
			m_manzana = manzana;
            //m_idlocalidad = IdLocalidad;
			m_idbarrio = idbarrio;
			m_idprovinciadomicilio = idprovinciadomicilio;
			m_referencia = referencia;
            //m_telefono1 = telefono1;
            //m_telefono2 = telefono2;
			m_idobrasocial = idobrasocial;
			m_idestadocivil = idestadocivil;
			m_idusuario = idusuario;
			m_fechaalta = fechaalta;
			m_fechadefuncion = fechadefuncion;
			m_fechaultimaactualizacion = fechaultimaactualizacion;
            m_foto = foto;
            m_numeroadic = numeroadic;
            m_idgenero = idgenero;
            m_nombreautopercibido = nombreautopercibido;
            m_mail = mail;
            m_idraza = idraza;
            m_sedeclaraaborigen = sedeclaraaborigen;
        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= ( m_idpaciente != value ); 
				m_idpaciente = value;
			}

		}


        /// <summary>
        /// 
        /// </summary>
        public int IdEstado
        {
            get { return m_idestado; }
            set
            {
                m_isChanged |= (m_idestado != value);
                m_idestado = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public int IdMotivoni
        {
            get { return m_idmotivoni; }
            set
            {
                m_isChanged |= (m_idmotivoni != value);
                m_idmotivoni = value;
            }

        }

        public int IdGenero
        {
            get { return m_idgenero; }
            set
            {
                m_isChanged |= (m_idgenero != value);
                m_idgenero = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string InformacionContacto
        {
            get { return m_informacioncontacto; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for InformacionContacto", value, "null");

                if (value.Length > 800)
                    throw new ArgumentOutOfRangeException("Invalid value for InformacionContacto", value, value.ToString());

                m_isChanged |= (m_informacioncontacto != value); m_informacioncontacto = value;
            }
        }

        public string Mail
        {
            get { return m_mail; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_mail", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_mail", value, value.ToString());

                m_isChanged |= (m_mail != value); m_mail = value;
            }
        }

        public string NombreAutopercibido
        {
            get { return m_nombreautopercibido; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_nombreautopercibido", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_nombreautopercibido", value, value.ToString());

                m_isChanged |= (m_nombreautopercibido != value); m_nombreautopercibido = value;
            }
        }

        public int IdRaza
        {
            get { return m_idraza; }
            set
            {
                m_isChanged |= (m_idraza != value);
                m_idraza = value;
            }
        }

        public bool SeDeclaraAborigen
        {
            get { return m_sedeclaraaborigen; }
            set
            {
                m_isChanged |= (m_sedeclaraaborigen != value);
                m_sedeclaraaborigen = value;
            }
        }
        //public IList SysHistoriaClinicaList
        //{
        //    get
        //    {
        //        return m_SysHistoriaClinicaList;
        //    }
        //    set
        //    {
        //        m_SysHistoriaClinicaList = value;
        //    }
        //}

        //public IList SysParentescoList
        //{
        //    get
        //    {
        //        return m_SysParentescoList;
        //    }
        //    set
        //    {
        //        m_SysParentescoList = value;
        //    }
        //}

        /// <summary>
        /// 
        /// </summary>
        public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int HistoriaClinica
		{
			get { return m_historiaclinica; }
			set
			{
				m_isChanged |= ( m_historiaclinica != value ); 
				m_historiaclinica = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}

        public string NumeroAdic
        {
            get { return m_numeroadic; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for NumeroAdic", value, "null");

                if (value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for NumeroAdic", value, value.ToString());

                m_isChanged |= (m_numeroadic != value); m_numeroadic = value;
            }
        }

         
        /// <summary>
        /// 
        /// </summary>
        public int NumeroDocumento
		{
			get { return m_numerodocumento; }
			set
			{
				m_isChanged |= ( m_numerodocumento != value ); 
				m_numerodocumento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdSexo
		{
			get { return m_idsexo; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSexo", value, "null");

				m_isChanged |= ( m_idsexo != value ); 
				m_idsexo = value;
			}

		}


        public int IdSexoLegal
        {
            get { return m_idsexolegal; }
            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for IdSexoLegal", value, "null");

                m_isChanged |= (m_idsexolegal != value);
                m_idsexolegal = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaNacimiento
		{
			get { return m_fechanacimiento; }
			set
			{
				m_isChanged |= ( m_fechanacimiento != value ); 
				m_fechanacimiento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdPais
		{
			get { return m_idpais; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdPais", value, "null");

				m_isChanged |= ( m_idpais != value ); 
				m_idpais = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProvincia
		{
			get { return m_idprovincia; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvincia", value, "null");

				m_isChanged |= ( m_idprovincia != value ); 
				m_idprovincia = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdNivelInstruccion
		{
			get { return m_idnivelinstruccion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdNivelInstrucccion", value, "null");

				m_isChanged |= ( m_idnivelinstruccion != value ); 
				m_idnivelinstruccion = value;
			}

		}

        public int generarNumero()
        {
             
            ISession m_session = NHibernateHttpModule.CurrentSession;
            Paciente oUltimoPacienteNI = new Paciente();
            ICriteria criterio = m_session.CreateCriteria(typeof(Paciente));
            int numerito = 0;
            criterio.Add(Expression.Sql(" IdPaciente in (Select top 1 IdPaciente From Sys_Paciente where IdEstado=2  order by idPaciente desc)"));
            oUltimoPacienteNI = (Paciente)criterio.UniqueResult();
            if (oUltimoPacienteNI != null)
                numerito = oUltimoPacienteNI.NumeroDocumento + 1;
            else
                numerito = 1;
            return numerito;
        
    }

        /// <summary>
        /// 
        /// </summary>
        public int IdSituacionLaboral
		{
			get { return m_idsituacionlaboral; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSituacionLaboral", value, "null");

				m_isChanged |= ( m_idsituacionlaboral != value ); 
				m_idsituacionlaboral = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProfesion
		{
			get { return m_idprofesion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProfesion", value, "null");

				m_isChanged |= ( m_idprofesion != value ); 
				m_idprofesion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdOcupacion
		{
			get { return m_idocupacion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdOcupacion", value, "null");

				m_isChanged |= ( m_idocupacion != value ); 
				m_idocupacion = value;
			}

		}

        public int getGeneroAndes(string v)
        {
            string m_strSQL = " SELECT idgenero from sys_genero with (nolock) where nombre='" + v+"'";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            if (Ds.Tables[0].Rows.Count > 0)

                return int.Parse(Ds.Tables[0].Rows[0][0].ToString());
            else
                return 0;
        }
 
        /// <summary>
        /// 
        /// </summary>
        public string Calle
		{
			get { return m_calle; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Calle", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Calle", value, value.ToString());
				
				m_isChanged |= (m_calle != value); m_calle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int Numero
		{
			get { return m_numero; }
			set
			{
				m_isChanged |= ( m_numero != value ); 
				m_numero = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Piso
		{
			get { return m_piso; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Piso", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Piso", value, value.ToString());
				
				m_isChanged |= (m_piso != value); m_piso = value;
			}
		}

        public int getSexoAndes(string v)
        {
            string m_strSQL = " SELECT idsexo from sys_sexo with (nolock) where nombre='" + v + "'";

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            if (Ds.Tables[0].Rows.Count > 0)

                return int.Parse(Ds.Tables[0].Rows[0][0].ToString());
            else
                return 0;
        }

        public int VerificaExistePaciente(string paciente_estado,string paciente_documento, string paciente_apellido, 
            string paciente_nombre, string paciente_sexo, string paciente_fn,
            string calle, string ciudad, string s_idusuario)
        {
            int idpac = 0;

            bool buscar = false;

            if ((paciente_estado.ToUpper() == "TEMPORAL") && (paciente_documento.Length > 5))
            {
                buscar = true;
            }
            if ((paciente_estado.ToUpper() == "VALIDADO") &&   (paciente_documento != ""))
                buscar = true;

            if  (buscar)//(paciente_estado.ToUpper() == "VALIDADO")
            {
                if (paciente_documento != "")
                {
                    ISession m_session = NHibernateHttpModule.CurrentSession;
                    ICriteria crit = m_session.CreateCriteria(typeof(Business.Data.Paciente));
                    crit.Add(Expression.Eq("NumeroDocumento", int.Parse(paciente_documento)));
                    IList lista = crit.List();
                    if (lista.Count > 0)
                    {
                        foreach (Business.Data.Paciente oPac in lista)
                        {
                            if (oPac.IdEstado != 2) // filtro los no temporales
                            {
                                if (paciente_sexo.ToUpper().Substring(0, 1) == oPac.getSexo().ToUpper().Substring(0, 1)) // si el mismo sexo
                                {
                                    if (oPac.Apellido.Contains(paciente_apellido)) // ver si se parece el apellido
                                    {
                                        idpac = oPac.IdPaciente;
                                    }
                                    else
                                        if (paciente_apellido.Contains(oPac.Apellido))
                                    {
                                        idpac = oPac.IdPaciente;
                                    }
                                    else
                                        idpac = 0; break; // no coincide nada del apellido

                                }
                                else
                                    // no coincide el sexo
                                    idpac = 0; break;
                            }


                        } // foreach
                    } /// if lista
                    else
                    {
                        /// dar de alta nueva paciente validado
                        /// 

                      //  this.Guardar( "VALIDADO",   paciente_documento,   paciente_apellido,   paciente_nombre,   paciente_sexo, paciente_fn,
                        //    calle, ciudad, s_idusuario);
                    }

                }
                else
                    idpac = -1; // si es validado y no tiene documento no se puede dar de alta
            }

         
                if (idpac==0)
            {

            }

            return idpac;
        }

        private void Guardar(string v, string paciente_documento, string paciente_apellido, string paciente_nombre,
            string paciente_sexo, string paciente_fn,
            string paciente_calle, string paciente_ciudad, string s_idusuario)
        {
            Utility oUtil = new Utility();
            Paciente pac = new Paciente();
            Usuario us = new Usuario();
            us = (Usuario)us.Get(typeof(Usuario), int.Parse(s_idusuario));

            pac.IdEfector =  us.IdEfector;
            pac.Apellido = oUtil.SacaComillas(paciente_apellido.ToUpper());
            pac.Nombre = oUtil.SacaComillas(paciente_nombre.ToUpper());

            

            if (v != "VALIDADO")
            {
                pac.IdEstado = 2;
                pac.IdMotivoni = 0;
                pac.NumeroDocumento = pac.generarNumero();
            }
            else
            {
                pac.IdEstado = 3;

                pac.NumeroDocumento = int.Parse(paciente_documento);
            }


           
                pac.FechaAlta = DateTime.Now;

            if (paciente_sexo.ToUpper().Substring(0, 1) == "F")
            {
                pac.IdSexo = 2;
                pac.IdSexoLegal = 2;
            }
            if (paciente_sexo.ToUpper().Substring(0, 1) == "M")
            { pac.IdSexo = 3;
                pac.IdSexoLegal = 3;
            }
            if (paciente_sexo.ToUpper().Substring(0, 1) == "X")
            {
                pac.IdSexo = 1; // biologico: indeterminado
                pac.IdSexoLegal = 4; // legal: X
            }
            //valido que la fecha no se mayor a la actual
            if ( Convert.ToDateTime(paciente_fn) <= DateTime.Now)  
            {
                pac.FechaNacimiento = Convert.ToDateTime(paciente_fn);
            }

            pac.IdPais = -1;//;Convert.ToInt32(ddlNacionalidad.SelectedValue);
            pac.IdProvincia = -1;


            string domi = paciente_calle;
            if (domi.Length >= 50)
                domi = domi.Substring(0, 50);

            pac.Calle = domi;

            pac.Numero = 0;




            pac.Piso = "";
            pac.Departamento = "";
            pac.Manzana = "";


            //if (btnConfirmar.Text != "Actualizar")
            pac.InformacionContacto = ""; // oUtil.SacaComillas(txtTelefono.Value);
            pac.FechaDefuncion = Convert.ToDateTime("01/01/1900");
            pac.IdUsuario = us.IdUsuario;
            pac.FechaUltimaActualizacion = DateTime.Now;
            pac.Save();


            //if (idEstado.Value == "3")
            if ((paciente_calle!= "") && (paciente_ciudad != ""))
            { 
                pac.GuardarDomicilio(DateTime.Now.ToShortDateString(), paciente_calle, "", paciente_ciudad, "", "", "");
                
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string Departamento
		{
			get { return m_departamento; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Departamento", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Departamento", value, value.ToString());
				
				m_isChanged |= (m_departamento != value); m_departamento = value;
			}
		}

        public void GuardarDomicilio(string fechaDomicilio, string Calle, string Barrio, string Ciudad, string Provincia, string Pais, string CodigoPostal)
        {
            DomicilioPaciente r = new DomicilioPaciente();
            // falta control de fecha de domicilio
            r = (DomicilioPaciente)r.Get(typeof(DomicilioPaciente),"IdPaciente",this,  "FechaDomicilio", DateTime.Parse(fechaDomicilio));
            if (r == null)
            {
                DomicilioPaciente r1 = new DomicilioPaciente();
                r1.IdPaciente = this;
                r1.FechaDomicilio = DateTime.Parse(fechaDomicilio);

                r1.Calle = Calle.ToUpper();
                r1.Barrio = Barrio.ToUpper();
                r1.Ciudad = Ciudad.ToUpper();
                r1.Provincia = Provincia.ToUpper();
                r1.Pais = Pais.ToUpper();
                r1.Cpostal = CodigoPostal;
                r1.IdUsuario = this.IdUsuario;
                r1.FechaAlta = this.FechaUltimaActualizacion;
                r1.Save();
            }

            else
            {
                r.Calle = Calle.ToUpper();
                r.Barrio = Barrio.ToUpper();
                r.Ciudad = Ciudad.ToUpper();
                r.Provincia = Provincia.ToUpper();
                r.Pais = Pais.ToUpper();
                r.Cpostal = CodigoPostal;
                r.IdUsuario = this.IdUsuario;
                r.FechaAlta = this.FechaUltimaActualizacion;
                r.Save();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string Manzana
		{
			get { return m_manzana; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Manzana", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Manzana", value, value.ToString());
				
				m_isChanged |= (m_manzana != value); m_manzana = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdLocalidad
		{
			get { return m_idlocalidad; }
			set
			{
				m_isChanged |= ( m_idlocalidad != value ); 
				m_idlocalidad = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdBarrio
		{
			get { return m_idbarrio; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdBarrio", value, "null");

				m_isChanged |= ( m_idbarrio != value ); 
				m_idbarrio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProvinciaDomicilio
		{
			get { return m_idprovinciadomicilio; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvinciaDomicilio", value, "null");

				m_isChanged |= ( m_idprovinciadomicilio != value ); 
				m_idprovinciadomicilio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Referencia
		{
			get { return m_referencia; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Referencia", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Referencia", value, value.ToString());
				
				m_isChanged |= (m_referencia != value); m_referencia = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        //public string Telefono1
        //{
        //    get { return m_telefono1; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono1", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono1", value, value.ToString());
				
        //        m_isChanged |= (m_telefono1 != value); m_telefono1 = value;
        //    }
        //}
			
        ///// <summary>
        ///// 
        ///// </summary>
        //public string Telefono2
        //{
        //    get { return m_telefono2; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono2", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono2", value, value.ToString());
				
        //        m_isChanged |= (m_telefono2 != value); m_telefono2 = value;
        //    }
        //}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdObraSocial
		{
			get { return m_idobrasocial; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdObraSocial", value, "null");

				m_isChanged |= ( m_idobrasocial != value ); 
				m_idobrasocial = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdEstadoCivil
        {
            get { return m_idestadocivil; }
            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for IdEstadoPaciente", value, "null");

                m_isChanged |= (m_idestadocivil != value);
                m_idestadocivil = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}

        public void ActualizarSexoProtocolo()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(Business.Data.Laboratorio.Protocolo));
            crit.Add(Expression.Eq("IdPaciente", this));
            IList lista = crit.List();
            if (lista.Count > 0)
            {
                foreach (Business.Data.Laboratorio.Protocolo oPro in lista)
                {
                    switch (this.IdSexo)
                    {
                        case 1: oPro.Sexo = "I"; break;
                        case 2: oPro.Sexo = "F"; break;
                        case 3: oPro.Sexo = "M"; break;
                    }
                    oPro.Save();

                } // foreach
            } /// if lista
        }

        public void ActualizarEdadProtocolo()
        {
            Utility oUtil = new Utility();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(Business.Data.Laboratorio.Protocolo));
            crit.Add(Expression.Eq("IdPaciente", this));
            IList lista = crit.List();
            if (lista.Count > 0)
            {
                foreach (Business.Data.Laboratorio.Protocolo oPro in lista)
                {
                    string[] edad = oUtil.DiferenciaFechas(this.FechaNacimiento, oPro.Fecha).Split(';');
                    oPro.Edad =int.Parse( edad[0].ToString());
                    switch (edad[1].ToUpper().Trim())
                    {
                        case "A": oPro.UnidadEdad = 0; break;
                        case "M": oPro.UnidadEdad = 1; break;
                        case "D": oPro.UnidadEdad = 2; break;
                    }
                    oPro.Save();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaAlta
		{
			get { return m_fechaalta; }
			set
			{
				m_isChanged |= ( m_fechaalta != value ); 
				m_fechaalta = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaDefuncion
		{
			get { return m_fechadefuncion; }
			set
			{
				m_isChanged |= ( m_fechadefuncion != value ); 
				m_fechadefuncion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaUltimaActualizacion
		{
			get { return m_fechaultimaactualizacion; }
			set
			{
				m_isChanged |= ( m_fechaultimaactualizacion != value ); 
				m_fechaultimaactualizacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdDepartamento
		{
			get { return m_iddepartamento; }
			set
			{
				m_isChanged |= ( m_iddepartamento != value ); 
				m_iddepartamento = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

        public string getSexo()
        {
            string ret = "Indefinido";
            switch (IdSexo)
            {
                case 1: ret = "Indefinido"; break;
                case 2: ret = "Femenino"; break;
                case 3: ret = "Masculino"; break;
                    
            }
            return ret;
        }

        public string getCodificaHiv(string embarazada)
        {
            throw new NotImplementedException();
        }

        public string GetProtocolosReciente(string idServicio)
        {
            string result="";
            ICriteria critProtocolo = m_session.CreateCriteria(typeof(Protocolo));

            string ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio="+ idServicio +
                " and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() + 
                " and LAb_Protocolo.Fecha>='" +DateTime.Now.AddDays(-7).ToString("yyyyMMdd") + "' order by LAb_Protocolo.IdProtocolo desc )";
            if (idServicio=="6")  // si es forense no importa la fecha                                
                ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=" + idServicio + 
                    " and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() + 
                    " order by LAb_Protocolo.IdProtocolo desc )";

            critProtocolo.Add(Expression.Sql(ssql_Protocolo));
       

            IList detalle = critProtocolo.List();

            if (detalle.Count > 0)
            {
                foreach (Protocolo oDetalle in detalle)
                {
                    result = oDetalle.GetNumero() + " - " + oDetalle.Fecha.ToShortDateString(); break;

                }
            }
            return result;
        }


        public string GetFechaProtocolosReciente(string idServicio, string idmuestra)
        {
            string result = "";
            ICriteria critProtocolo = m_session.CreateCriteria(typeof(Protocolo));

            string ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=" + idServicio +
                " and LAb_Protocolo.baja=0  and Lab_Protocolo.idMuestra="+idmuestra+"  and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                " and LAb_Protocolo.Fecha>='" + DateTime.Now.AddDays(-7).ToString("yyyyMMdd") + "' order by LAb_Protocolo.IdProtocolo desc )";
            if (idServicio == "6")  // si es forense no importa la fecha                                
                ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=" + idServicio +
                    " and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                    " order by LAb_Protocolo.IdProtocolo desc )";

            critProtocolo.Add(Expression.Sql(ssql_Protocolo));


            IList detalle = critProtocolo.List();

            if (detalle.Count > 0)
            {
                foreach (Protocolo oDetalle in detalle)
                {
                    result = oDetalle.Fecha.ToShortDateString(); break;

                }
            }
            return result;
        }

        public string GetFechaProtocolosReciente(string idServicio, string idmuestra, string codigoDeterminacion)
        {
            string result = "";
            ICriteria critProtocolo = m_session.CreateCriteria(typeof(Protocolo));

            string ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=" + idServicio +
                " and LAb_Protocolo.baja=0  and Lab_Protocolo.idMuestra=" + idmuestra + "  and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                " and LAb_Protocolo.Fecha>='" + DateTime.Now.AddDays(-7).ToString("yyyyMMdd") + "' order by LAb_Protocolo.IdProtocolo desc )";
            if (idServicio == "6")  // si es forense no importa la fecha                                
                ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=" + idServicio +
                    " and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                    " order by LAb_Protocolo.IdProtocolo desc )";

            critProtocolo.Add(Expression.Sql(ssql_Protocolo));


            IList detalle = critProtocolo.List();

            if (detalle.Count > 0)
            {
                foreach (Protocolo oDetalle in detalle)
                {
                    Item oItem = new Item();
                    oItem = (Item)oItem.Get(typeof(Item), "Codigo", codigoDeterminacion);

                    DetalleProtocolo oDetalleProtocolo = new DetalleProtocolo();
                    ISession m_session = NHibernateHttpModule.CurrentSession;
                    ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
                    crit.Add(Expression.Eq("IdProtocolo", oDetalle));
                    crit.Add(Expression.Eq("IdSubItem", oItem));
                    IList detalleDeterminacion = crit.List();
                    if (detalleDeterminacion.Count > 0) //ya tiene un 9124 en el mismo dia
                    {
                        result = oDetalle.Fecha.ToShortDateString();
                        break;
                    }

                }
            }
            return result;
        }
        public string getNumeroImprimir()
        {
            if (this.IdEstado == 2) //temporal
                return "sin dni";
            else
                return this.NumeroDocumento.ToString();

        }

        public string GetProtocolosReciente(int dias, string v, Protocolo protocolo)
        {
            string result = "";
            ICriteria critProtocolo = m_session.CreateCriteria(typeof(Protocolo));

            string ssql_Protocolo = " IdProtocolo in (Select top 1 LAb_Protocolo.IdProtocolo From LAb_Protocolo where Lab_Protocolo.idTipoServicio=3 and LAb_Protocolo.baja=0   and LAb_Protocolo.idPaciente=" + this.IdPaciente.ToString() +
                " and LAb_Protocolo.Fecha>='" + DateTime.Now.AddDays(-dias).ToString("yyyyMMdd") + "' order by LAb_Protocolo.IdProtocolo desc )";
         

            critProtocolo.Add(Expression.Sql(ssql_Protocolo));


            IList detalle = critProtocolo.List();

            if (detalle.Count > 0)
            {
                foreach (Protocolo oDetalle in detalle)
                {
                    if (oDetalle != protocolo)
                    {
                        result = oDetalle.GetNumero() + " - " + oDetalle.Fecha.ToShortDateString(); break;
                    }

                }
            }
            return result;
        }
    }
}
