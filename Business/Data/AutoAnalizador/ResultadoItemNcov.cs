/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.AutoAnalizador
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class ResultadoItemNcov : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idResultadoItemNcov; 
		private int m_idResultadoItem; 
		 
		private string m_resultadoEquipo;
      


		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ResultadoItemNcov()
		{
            m_idResultadoItemNcov = 0;
            m_idResultadoItem = 0;

            m_resultadoEquipo = String.Empty;
           
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ResultadoItemNcov(
			int idResultadoItemNcov, 
			int idResultadoItem, 
			string resultadoEquipo 
           )
			: this()
		{
            m_idResultadoItemNcov = idResultadoItemNcov;
            m_idResultadoItem = idResultadoItem;
            m_resultadoEquipo = resultadoEquipo;
            
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdResultadoItemNcov
        {
			get { return m_idResultadoItemNcov; }
			set
			{
				m_isChanged |= (m_idResultadoItemNcov != value );
                m_idResultadoItemNcov = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdResultadoItem
        {
			get { return m_idResultadoItem; }
			set
			{
				m_isChanged |= (m_idResultadoItem != value );
                m_idResultadoItem = value;
			}

		}
			
	 
		/// <summary>
		/// 
		/// </summary>
		public string ResultadoEquipo
        {
			get { return m_resultadoEquipo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TipoMuestra", value, "null");
				
				if(  value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for TipoMuestra", value, value.ToString());
				
				m_isChanged |= (m_resultadoEquipo != value); m_resultadoEquipo = value;
			}
        }
     

        /// <summary>
        /// 
        /// </summary>
    

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
