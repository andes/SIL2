/*
insert license info here
*/
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.AutoAnalizador
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class ProtocoloLuminex : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idprotocololuminex;
        private int m_idProtocolo;
	
		private int m_iditem; 
		private string m_idsubitem; 
		private string m_tipovalor; 
		private string m_valor;
        private int m_idusuarioresultado;
        private DateTime m_fecharesultado;
        private int m_idusuariovalida;
        private DateTime m_fechavalida;


        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public ProtocoloLuminex()
		{
			m_idprotocololuminex = 0;
            m_idProtocolo = 0;	

			m_iditem =0; 
			m_idsubitem = String.Empty; 
			m_tipovalor = String.Empty; 
			m_valor = String.Empty;
            m_idusuarioresultado = 0;
            m_fecharesultado = DateTime.MinValue;
            m_idusuariovalida = 0;
            m_fechavalida = DateTime.MinValue;



        }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ProtocoloLuminex(
            int idProtocolo,
		
			int iditem, 
			string idsubitem, 
			string tipovalor, 
			string valor, int idusuarioresultado,
            DateTime fecharesultado,
            int idusuariovalida,
            DateTime fechavalida)
			: this()
		{
            m_idProtocolo = idProtocolo;
		

			m_iditem = iditem;
			m_idsubitem = idsubitem;
			m_tipovalor = tipovalor;
			m_valor = valor; m_idusuarioresultado = idusuarioresultado;
            m_fecharesultado = fecharesultado;
            m_idusuariovalida = idusuariovalida;
            m_fechavalida = fechavalida;




        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProtocoloLuminex
        {
			get { return m_idprotocololuminex; }
			set
			{
				m_isChanged |= ( m_idprotocololuminex != value ); 
				m_idprotocololuminex = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        /// 
        public int IdProtocolo
        {
            get { return m_idProtocolo; }
            set
            {
                m_isChanged |= (m_idProtocolo != value);
                m_idProtocolo = value;
            }

        }
        public int IdUsuarioResultado
        {
            get { return m_idusuarioresultado; }
            set
            {
                m_isChanged |= (m_idusuarioresultado != value);
                m_idusuarioresultado = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaResultado
        {
            get { return m_fecharesultado; }
            set
            {
                m_isChanged |= (m_fecharesultado != value);
                m_fecharesultado = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
     
        /// <summary>
        /// 
        /// </summary>
        public int IdUsuarioValida
        {
            get { return m_idusuariovalida; }
            set
            {
                m_isChanged |= (m_idusuariovalida != value);
                m_idusuariovalida = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaValida
        {
            get { return m_fechavalida; }
            set
            {
                m_isChanged |= (m_fechavalida != value);
                m_fechavalida = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public int IdItem
        {
            get { return m_iditem; }
            set
            {
                m_isChanged |= (m_iditem != value);
                m_iditem = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>
		public string IdSubitem
        {
			get { return m_idsubitem; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSubitem", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for IdSubitem", value, value.ToString());
				
				m_isChanged |= (m_idsubitem != value); m_idsubitem = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TipoValor
        {
			get { return m_tipovalor; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for ValorNegativo", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for tipo valor", value, value.ToString());
				
				m_isChanged |= (m_tipovalor != value); m_tipovalor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Valor
        {
			get { return m_valor; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Valorl", value, "null");
				
				if(  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Valor", value, value.ToString());
				
				m_isChanged |= (m_valor != value); m_valor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public object LeerDatosProtocolos(string s_nroProtocolo, int iditem)
        {
          
            string m_strSQL = @"  SELECT *
FROM
(
      SELECT valor, tipovalor, idsubitem
    FROM LAB_ProtocoloLuminex where idProtocolo=" + s_nroProtocolo + @" and iditem= "+ iditem.ToString()+ @"
) AS SourceTable PIVOT(max(valor) FOR idsubitem IN([Anti HLA-A], [Anti HLA-B],[Anti HLA-C])) AS PivotTable
                                                         order by tipovalor desc";


            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            return Ds.Tables[0];

        }

        ///// <summary>
        ///// 
        ///// </summary>
        //public string ValorPositivoFuerte
        //      {
        //	get { return m_valorPositivoFuerte; }

        //	set	
        //	{	
        //		if( value == null )
        //			throw new ArgumentOutOfRangeException("Null value not allowed for ValorPositivoFuerte", value, "null");

        //		if(  value.Length > 500)
        //			throw new ArgumentOutOfRangeException("Invalid value for ValorPositivoFuerte", value, value.ToString());

        //		m_isChanged |= (m_valorPositivoFuerte != value); m_valorPositivoFuerte = value;
        //	}
        //}

        /// <summary>
        /// 
        /// </summary>


        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}

        public void Guardar(string iD, int numero, int user)
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(ProtocoloLuminex));
            crit.Add(Expression.Eq("IdProtocolo", numero));
            crit.Add(Expression.Eq("IdItem", int.Parse(iD)));
            IList detalle = crit.List();
            if (detalle.Count > 0)
            {
                foreach (ProtocoloLuminex oDetalle in detalle)
                {
                    oDetalle.IdUsuarioValida = user;
                          oDetalle.FechaValida = DateTime.Now;
                    oDetalle.Save();
                }
            }



        }

        #endregion
    }
}
