/*
insert license info here
*/
using NHibernate;
using NHibernate.Expression;
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Efector : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idefector; 
		private string m_nombre; 
		private Zona m_idzona; 
		private string m_nombrenacion; 
		private string m_complejidad; 
		private int m_idefectorsuperior; 
		private string m_domicilio; 
		private string m_telefono; 
		private string m_reponsable;
        private int m_idtipoefector;
        private bool m_notificarsisa;
        private string m_codigosisa;
        private string m_codigoREFES;
        private string m_region;
        private string m_idEfector2;
        private string m_jefeLaboratorio;
        private string m_correoJefe;
        private int m_idregion ;

        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public Efector()
		{
			m_idefector = 0; 
			m_nombre = String.Empty; 
			m_idzona =new Zona(); 
			m_nombrenacion = String.Empty; 
			m_complejidad = String.Empty; 
			m_idefectorsuperior =0; 
			m_domicilio = String.Empty; 
			m_telefono = String.Empty; 
			m_reponsable = String.Empty;
            m_idtipoefector = 0;
            m_notificarsisa = false;
            m_codigosisa= String.Empty;
              m_codigoREFES = String.Empty;
        m_region = String.Empty; 
         m_idEfector2 = String.Empty; 
         m_jefeLaboratorio = String.Empty; 
         m_correoJefe = String.Empty;
            m_idregion = 0;
    }
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Efector(
			string nombre, 
			Zona idzona, 
			string nombrenacion, 
			string complejidad, 
			int idefectorsuperior, 
			string domicilio, 
			string telefono, 
			string reponsable,
            int idtipoefector,
            Boolean notificarsisa,
            string codigosisa)
			: this()
		{
			m_nombre = nombre;
			m_idzona = idzona;
			m_nombrenacion = nombrenacion;
			m_complejidad = complejidad;
			m_idefectorsuperior = idefectorsuperior;
			m_domicilio = domicilio;
			m_telefono = telefono;
			m_reponsable = reponsable;
            m_idtipoefector = idtipoefector;
            m_notificarsisa = notificarsisa;
            m_codigosisa = codigosisa;
        }
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}

        public int IdRegion
        {
            get { return m_idregion; }
            set
            {
                m_isChanged |= (m_idregion != value);
                m_idregion = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}



        public string CodigoSISA
        {
            get { return m_codigosisa; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_codigosisa", value, "null");

                if (value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for m_codigosisa", value, value.ToString());

                m_isChanged |= (m_codigosisa != value); m_codigosisa = value;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public Zona IdZona
		{
			get { return m_idzona; }
			set
			{
				m_isChanged |= ( m_idzona != value ); 
				m_idzona = value;
			}

		}

        public string CodigoREFES
        {
            get { return m_codigoREFES; }
            set
            {
                m_isChanged |= (m_codigoREFES != value);
                m_codigoREFES = value;
            }

        }

        //public string Region
        //{
        //    get { return m_region; }
        //    set
        //    {
        //        m_isChanged |= (m_region != value);
        //        m_region = value;
        //    }

        //}
        public string IdEfector2
        {
            get { return m_idEfector2; }
            set
            {
                m_isChanged |= (m_idEfector2 != value);
                m_idEfector2 = value;
            }

        }
        public string JefeLaboratorio
        {
            get { return m_jefeLaboratorio; }
            set
            {
                m_isChanged |= (m_jefeLaboratorio != value);
                m_jefeLaboratorio = value;
            }

        }
        public string CorreoJefe
        {
            get { return m_correoJefe; }
            set
            {
                m_isChanged |= (m_correoJefe != value);
                m_correoJefe = value;
            }

        }
        
		/// <summary>
		/// 
		/// </summary>
		public string NombreNacion
		{
			get { return m_nombrenacion; }

			set	
			{	
				if( value == null )					throw new ArgumentOutOfRangeException("Null value not allowed for NombreNacion", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for NombreNacion", value, value.ToString());
				
				m_isChanged |= (m_nombrenacion != value); m_nombrenacion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Complejidad
		{
			get { return m_complejidad; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Complejidad", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Complejidad", value, value.ToString());
				
				m_isChanged |= (m_complejidad != value); m_complejidad = value;
			}
		}

        public bool tieneVinculados()
        {
        Business.Data.Laboratorio.Protocolo oProtocolo = new Business.Data.Laboratorio.Protocolo ();
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(Business.Data.Laboratorio.Protocolo));
            crit.Add(Expression.Eq("IdEfectorSolicitante", this));

            IList items = crit.List();
            if (items.Count > 0) return true;
            else return false;
        }

        /// <summary>
        /// 
        /// </summary>
        public int IdEfectorSuperior
        {
            get { return m_idefectorsuperior; }
            set
            {
                m_isChanged |= (m_idefectorsuperior != value);
                m_idefectorsuperior = value;
            }

        }
        public int IdTipoEfector
        {
            get { return m_idtipoefector; }
            set
            {
                m_isChanged |= (m_idtipoefector != value);
                m_idtipoefector = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public string Domicilio
		{
			get { return m_domicilio; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Domicilio", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Domicilio", value, value.ToString());
				
				m_isChanged |= (m_domicilio != value); m_domicilio = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Telefono
		{
			get { return m_telefono; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Telefono", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Telefono", value, value.ToString());
				
				m_isChanged |= (m_telefono != value); m_telefono = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Reponsable
		{
			get { return m_reponsable; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Reponsable", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Reponsable", value, value.ToString());
				
				m_isChanged |= (m_reponsable != value); m_reponsable = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}


        public bool NotificarSISA
        {
            get { return m_notificarsisa; }
            set
            {
                m_isChanged |= (m_notificarsisa != value);
                m_notificarsisa = value;
            }

        }
        #endregion


    }
}
